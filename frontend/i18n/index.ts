/**
 * Minimal i18n dictionary helper for the Users module.
 * Merges with any existing global dictionary exposed as __TP_I18N__.
 */
const base: Record<string, Record<string, string>> =
  (globalThis as any).__TP_I18N__ && typeof (globalThis as any).__TP_I18N__ === 'object'
    ? { ...(globalThis as any).__TP_I18N__ }
    : {};

function ensure(lang: string, entries: Record<string, string>) {
  base[lang] = { ...(base[lang] ?? {}), ...entries };
}

ensure('de', {
  users: 'Benutzer',
  search: 'Suche...',
  tasks: 'Aufgaben',
  notifications: 'Benachrichtigungen',
  createTask: 'Aufgabe erstellen',
  defaultTaskName: 'Neue Aufgabe',
  cron: 'Cron',
  channels: 'Kanäle',
  payload: 'Payload',
  runNow: 'Jetzt ausführen',
  offline: 'Offline',
  delete: 'Löschen',
  enabled: 'Aktiv',
  disabled: 'Inaktiv',
  name: 'Name',
  description: 'Beschreibung',
  status: 'Status',
  lastRun: 'Letzte Ausführung',
  never: 'nie',
  noTasks: 'Keine Aufgaben vorhanden.',
  noTaskSelected: 'Bitte eine Aufgabe auswählen oder eine neue erstellen.',
  defaultSubject: 'Hallo',
  defaultBody: 'Dies ist eine Benachrichtigung.',
  toastCreated: 'Aufgabe erstellt.',
  toastSaved: 'Aufgabe gespeichert.',
  toastDeleted: 'Aufgabe gelöscht.',
  toastDispatched: 'Aufgabe wurde ausgelöst.',
  confirmDeleteTask: 'Soll diese Aufgabe gelöscht werden?',
  invalidJson: 'Ungültiges JSON',
  tasksLoadFailed: 'Aufgaben konnten nicht geladen werden.',
  taskRunFailed: 'Aufgabe konnte nicht ausgeführt werden.',
  notificationsLoadFailed: 'Benachrichtigungen konnten nicht geladen werden.',
  markRead: 'Als gelesen markieren',
  read: 'Gelesen',
  noNotifications: 'Keine Benachrichtigungen.',
  noSubject: '(Kein Betreff)',
  toastMarked: 'Als gelesen markiert.',
  assignRole: 'Rolle zuweisen',
  revokeSessions: 'Sitzungen widerrufen',
  save: 'Speichern',
  successAssign: 'Rolle wurde zugewiesen.',
  successRevoke: 'Sitzungen widerrufen.',
  createUser: 'Benutzer anlegen',
  emailPlaceholder: 'benutzer@example.com',
  noEmail: 'Keine E-Mail',
  sessions: 'Sitzungen',
  sessionsNone: 'Keine Sitzungen',
  refresh: 'Neu laden',
  selectRole: 'Rolle auswählen',
  claims: 'Claims',
  claimsNone: 'Keine Claims',
  tenants: 'Tenant-IDs (mit Komma trennen)',
  tenantsTitle: 'Mandanten',
  createTenant: 'Mandanten anlegen',
  tenantCodePlaceholder: 'Mandantencode',
  tenantNamePlaceholder: 'Mandantenname',
  assignUser: 'Benutzer zuweisen',
  tenantIdPlaceholder: 'Tenant-ID',
  userIdPlaceholder: 'Benutzer-ID',
  rolePlaceholder: 'Rolle (optional)',
  assignAction: 'Zuweisen',
  create: 'Erstellen',
  tenantListTitle: 'Mandantenliste',
  tenantCodeLabel: 'Code',
  tenantCodeRequired: 'Mandantencode ist erforderlich.',
  tenantNameRequired: 'Mandantenname ist erforderlich.',
  tenantIdRequired: 'Tenant-ID ist erforderlich.',
  userIdRequired: 'Benutzer-ID ist erforderlich.',
  tenantCreated: 'Mandant erstellt.',
  tenantAssignSuccess: 'Zuweisung gespeichert.',
  noRecords: 'Keine Einträge.',
  loadFailed: 'Laden fehlgeschlagen.',
  legalName: 'Firmenname',
  legalForm: 'Rechtsform',
  uid: 'UID',
  regNo: 'Firmenbuch-Nr.',
  status: 'Status',
  statusActive: 'Aktiv',
  statusPassive: 'Passiv',
  legalNameRequired: 'Firmenname ist erforderlich.',
  legalFormRequired: 'Rechtsform ist erforderlich.',
  enterTenantId: 'Bitte eine Tenant-ID eingeben.',
  selectRecord: 'Bitte einen Eintrag auswählen.',
  companyCreateFailed: 'Unternehmen konnte nicht erstellt werden.',
  documents: 'Dokumente',
  companyUpdateFailed: 'Änderungen konnten nicht gespeichert werden.',
  companyDeleteFailed: 'Unternehmen konnte nicht gelöscht werden.',
  companyDeleteConfirm: 'Soll dieses Unternehmen gelöscht werden?',
  companyDeleted: 'Unternehmen gelöscht.',
  companyNotFound: 'Unternehmen nicht gefunden.',
  companyDetailLoadFailed: 'Unternehmensdetails konnten nicht geladen werden.',
  typeRequired: 'Typ ist erforderlich.',
  personNameRequired: 'Name der Person ist erforderlich.',
  roleTypeRequired: 'Rollenart ist erforderlich.',
  percentMustBeNumber: 'Prozentwert muss eine Zahl sein.',
  docTypeRequired: 'Dokumenttyp ist erforderlich.',
  titleRequired: 'Titel ist erforderlich.',
  metaJsonInvalid: 'metaJson muss gültiges JSON sein.',
  code: 'Code',
  tenantId: 'Tenant-ID',
  saved: 'Gespeichert',
  created: 'Erstellt',
  deleted: 'Gelöscht',
  companyListFailed: 'Liste konnte nicht abgerufen werden.',
  ouListFailed: 'Organisationseinheiten konnten nicht geladen werden.',
  metaJsonMissing: 'metaJson fehlt',
  parent: 'Überordnung',
  ou: 'Organisationseinheiten',
  reload: 'Neu laden',
  edit: 'Bearbeiten',
  confirmDelete: 'Soll dieser Eintrag gelöscht werden?',
  editNamePrompt: 'Neuer Name?',
  close: 'Schließen',
  update: 'Aktualisieren',
  cannotDeleteWithChildren: 'Untergeordnete Einträge vorhanden, Löschen nicht möglich',
  success: 'Erfolg',
  optional: 'optional',
  periodFrom: 'Zeitraum (von)',
  periodTo: 'Zeitraum (bis)',
  piiStrict: 'PII: streng',
  piiStandard: 'PII: Standard',
  piiNone: 'PII: keine',
  successCreate: 'Benutzer erstellt.',
  mfa: 'MFA',
  mfaEnabled: 'Aktiv',
  mfaDisabled: 'Inaktiv',
  loading: 'Lädt...',
  noUsers: 'Keine Benutzer gefunden.',
  selectUser: 'Bitte einen Benutzer auswählen.',
  errorGeneric: 'Aktion fehlgeschlagen.',
  required_pairs: 'Pflichtfelder fehlen.',
  claimsPeriodInvalid: 'Bitte Zeitraum komplett angeben (von/bis).',
  permissions: 'Berechtigungen',
  permissionsShow: 'Anzeigen',
  permissionsHide: 'Verbergen',
  permissionsNone: 'Keine Berechtigungen',
  prev: 'Zurück',
  next: 'Weiter',
  noRoles: 'Keine Rollen',
  roleRemoveTitle: 'Rolle entfernen',
  roleRemoveConfirm: 'Soll die Rolle "{role}" entfernt werden?',
  roleRemoved: 'Rolle entfernt.',
  roleRemoveFailed: 'Rolle konnte nicht entfernt werden.',
  officers: 'Geschäftsführer',
  shareholders: 'Gesellschafter',
  docs: 'Dokumente',
  add: 'Hinzufügen',
  type: 'Typ',
  userId: 'Benutzer-ID',
  personName: 'Name der Person',
  roleType: 'Rollenart',
  percent: 'Prozent',
  export: 'Export',
  docType: 'Dokumenttyp',
  title: 'Titel',
  url: 'URL'
});

ensure('en', {
  users: 'Users',
  search: 'Search...',
  tasks: 'Tasks',
  notifications: 'Notifications',
  createTask: 'Create task',
  defaultTaskName: 'New task',
  cron: 'Cron',
  channels: 'Channels',
  payload: 'Payload',
  runNow: 'Run now',
  offline: 'Offline',
  delete: 'Delete',
  enabled: 'Enabled',
  disabled: 'Disabled',
  name: 'Name',
  description: 'Description',
  status: 'Status',
  lastRun: 'Last run',
  never: 'never',
  noTasks: 'No tasks yet.',
  noTaskSelected: 'Select a task or create a new one.',
  defaultSubject: 'Hello',
  defaultBody: 'This is a notification.',
  toastCreated: 'Task created.',
  toastSaved: 'Task saved.',
  toastDeleted: 'Task deleted.',
  toastDispatched: 'Task dispatched.',
  confirmDeleteTask: 'Delete this task?',
  invalidJson: 'Invalid JSON',
  tasksLoadFailed: 'Tasks could not be loaded.',
  taskRunFailed: 'Task could not be executed.',
  notificationsLoadFailed: 'Notifications could not be loaded.',
  markRead: 'Mark as read',
  read: 'Read',
  noNotifications: 'No notifications.',
  noSubject: '(No subject)',
  toastMarked: 'Marked as read.',
  assignRole: 'Assign Role',
  revokeSessions: 'Revoke Sessions',
  save: 'Save',
  successAssign: 'Role assigned.',
  successRevoke: 'Sessions revoked.',
  createUser: 'Create User',
  emailPlaceholder: 'user@example.com',
  noEmail: 'No email',
  sessions: 'Sessions',
  sessionsNone: 'No sessions',
  refresh: 'Refresh',
  selectRole: 'Select role',
  claims: 'Claims',
  claimsNone: 'No claims',
  tenants: 'Tenant IDs (comma separated)',
  tenantsTitle: 'Tenants',
  createTenant: 'Create tenant',
  tenantCodePlaceholder: 'Tenant code',
  tenantNamePlaceholder: 'Tenant name',
  assignUser: 'Assign user',
  tenantIdPlaceholder: 'Tenant ID',
  userIdPlaceholder: 'User ID',
  rolePlaceholder: 'Role (optional)',
  assignAction: 'Assign',
  create: 'Create',
  tenantListTitle: 'Tenant list',
  tenantCodeLabel: 'Code',
  tenantCodeRequired: 'Tenant code is required.',
  tenantNameRequired: 'Tenant name is required.',
  tenantIdRequired: 'Tenant ID is required.',
  userIdRequired: 'User ID is required.',
  tenantCreated: 'Tenant created.',
  tenantAssignSuccess: 'Assignment saved.',
  noRecords: 'No records.',
  loadFailed: 'Could not load data.',
  legalName: 'Legal name',
  legalForm: 'Legal form',
  uid: 'UID',
  regNo: 'Registration no.',
  status: 'Status',
  statusActive: 'Active',
  statusPassive: 'Passive',
  legalNameRequired: 'Legal name is required.',
  legalFormRequired: 'Legal form is required.',
  enterTenantId: 'Please enter a tenant ID.',
  selectRecord: 'Select a record to continue.',
  companyCreateFailed: 'Failed to create company.',
  documents: 'Documents',
  companyUpdateFailed: 'Failed to save changes.',
  companyDeleteFailed: 'Failed to delete company.',
  companyDeleteConfirm: 'Are you sure you want to delete this company?',
  companyDeleted: 'Company deleted.',
  companyNotFound: 'Company not found.',
  companyDetailLoadFailed: 'Could not load company details.',
  typeRequired: 'Type is required.',
  personNameRequired: 'Person name is required.',
  roleTypeRequired: 'Role type is required.',
  percentMustBeNumber: 'Percent must be a number.',
  docTypeRequired: 'Document type is required.',
  titleRequired: 'Title is required.',
  metaJsonInvalid: 'metaJson must be valid JSON.',
  code: 'Code',
  tenantId: 'Tenant ID',
  saved: 'Saved',
  created: 'Created',
  deleted: 'Deleted',
  companyListFailed: 'Failed to fetch list.',
  ouListFailed: 'Failed to fetch organization units.',
  metaJsonMissing: 'metaJson missing',
  parent: 'Parent',
  ou: 'Organization Units',
  reload: 'Reload',
  edit: 'Edit',
  confirmDelete: 'Delete this entry?',
  editNamePrompt: 'New name?',
  close: 'Close',
  update: 'Update',
  cannotDeleteWithChildren: 'Cannot delete because children exist',
  success: 'Success',
  optional: 'optional',
  periodFrom: 'Period from',
  periodTo: 'Period to',
  piiStrict: 'PII: strict',
  piiStandard: 'PII: standard',
  piiNone: 'PII: none',
  successCreate: 'User created.',
  mfa: 'MFA',
  mfaEnabled: 'Enabled',
  mfaDisabled: 'Disabled',
  loading: 'Loading...',
  noUsers: 'No users found.',
  selectUser: 'Select a user to view details.',
  errorGeneric: 'Operation failed.',
  required_pairs: 'Required fields are missing.',
  claimsPeriodInvalid: 'Please provide both start and end dates.',
  permissions: 'Permissions',
  permissionsShow: 'Show',
  permissionsHide: 'Hide',
  permissionsNone: 'No permissions',
  prev: 'Prev',
  next: 'Next',
  noRoles: 'No roles',
  roleRemoveTitle: 'Remove role',
  roleRemoveConfirm: 'Remove the role "{role}"?',
  roleRemoved: 'Role removed.',
  roleRemoveFailed: 'Failed to remove role.',
  officers: 'Officers',
  shareholders: 'Shareholders',
  docs: 'Documents',
  add: 'Add',
  type: 'Type',
  userId: 'User ID',
  personName: 'Person name',
  roleType: 'Role type',
  percent: 'Percent',
  export: 'Export',
  docType: 'Document type',
  title: 'Title',
  url: 'URL'
});

ensure('tr', {
  users: 'Kullanıcılar',
  search: 'Ara...',
  tasks: 'Görevler',
  notifications: 'Bildirimler',
  createTask: 'Görev oluştur',
  defaultTaskName: 'Yeni görev',
  cron: 'Cron',
  channels: 'Kanallar',
  payload: 'Yük',
  runNow: 'Hemen çalıştır',
  offline: 'Çevrimdışı',
  delete: 'Sil',
  enabled: 'Aktif',
  disabled: 'Pasif',
  name: 'Ad',
  description: 'Açıklama',
  status: 'Durum',
  lastRun: 'Son çalıştırma',
  never: 'hiç',
  noTasks: 'Henüz görev yok.',
  noTaskSelected: 'Bir görev seçin veya yeni oluşturun.',
  defaultSubject: 'Merhaba',
  defaultBody: 'Bu bir bildirimdir.',
  toastCreated: 'Görev oluşturuldu.',
  toastSaved: 'Görev kaydedildi.',
  toastDeleted: 'Görev silindi.',
  toastDispatched: 'Görev tetiklendi.',
  confirmDeleteTask: 'Görev silinsin mi?',
  invalidJson: 'Geçersiz JSON',
  tasksLoadFailed: 'Görevler alınamadı.',
  taskRunFailed: 'Görev çalıştırılamadı.',
  notificationsLoadFailed: 'Bildirimler alınamadı.',
  markRead: 'Okundu işaretle',
  read: 'Okundu',
  noNotifications: 'Bildirim yok.',
  noSubject: '(Konu yok)',
  toastMarked: 'Okundu olarak işaretlendi.',
  assignRole: 'Rol Ata',
  revokeSessions: 'Oturumları sıfırla',
  save: 'Kaydet',
  successAssign: 'Rol atandı.',
  successRevoke: 'Oturumlar sıfırlandı.',
  createUser: 'Kullanıcı Oluştur',
  emailPlaceholder: 'kullanici@example.com',
  noEmail: 'E-posta yok',
  sessions: 'Oturumlar',
  sessionsNone: 'Oturum yok',
  refresh: 'Yenile',
  selectRole: 'Rol seç',
  claims: 'Claims',
  claimsNone: 'Claims bulunmuyor',
  tenants: 'Kiracı kimlikleri (virgülle ayırın)',
  tenantsTitle: 'Kiracılar',
  createTenant: 'Kiracı oluştur',
  tenantCodePlaceholder: 'Kiracı kodu',
  tenantNamePlaceholder: 'Kiracı adı',
  assignUser: 'Kullanıcı ata',
  tenantIdPlaceholder: 'Tenant kimliği',
  userIdPlaceholder: 'Kullanıcı kimliği',
  rolePlaceholder: 'Rol (opsiyonel)',
  assignAction: 'Ata',
  create: 'Oluştur',
  tenantListTitle: 'Kiracı listesi',
  tenantCodeLabel: 'Kod',
  tenantCodeRequired: 'Kiracı kodu zorunludur.',
  tenantNameRequired: 'Kiracı adı zorunludur.',
  tenantIdRequired: 'Tenant kimliği zorunludur.',
  userIdRequired: 'Kullanıcı kimliği zorunludur.',
  tenantCreated: 'Kiracı oluşturuldu.',
  tenantAssignSuccess: 'Atama kaydedildi.',
  noRecords: 'Kayıt yok.',
  loadFailed: 'Veriler yüklenemedi.',
  legalName: 'Şirket adı',
  legalForm: 'Hukuki form',
  uid: 'UID',
  regNo: 'Ticaret sicil no',
  status: 'Durum',
  statusActive: 'Aktif',
  statusPassive: 'Pasif',
  legalNameRequired: 'Şirket adı zorunludur.',
  legalFormRequired: 'Hukuki form zorunludur.',
  enterTenantId: 'Lütfen tenant kimliği girin.',
  selectRecord: 'Bir kayıt seçiniz.',
  companyCreateFailed: 'Şirket oluşturulamadı.',
  documents: 'Belgeler',
  companyUpdateFailed: 'Değişiklikler kaydedilemedi.',
  companyDeleteFailed: 'Şirket silinemedi.',
  companyDeleteConfirm: 'Bu şirketi silmek istediğinize emin misiniz?',
  companyDeleted: 'Şirket silindi.',
  companyNotFound: 'Şirket bulunamadı.',
  companyDetailLoadFailed: 'Şirket detayları yüklenemedi.',
  typeRequired: 'Tip zorunludur.',
  personNameRequired: 'Kişi adı zorunludur.',
  roleTypeRequired: 'Rol tipi zorunludur.',
  percentMustBeNumber: 'Yüzde değeri sayı olmalıdır.',
  docTypeRequired: 'Belge türü zorunludur.',
  titleRequired: 'Başlık zorunludur.',
  metaJsonInvalid: 'metaJson geçerli JSON olmalıdır.',
  code: 'Kod',
  tenantId: 'Tenant kimliği',
  saved: 'Kaydedildi',
  created: 'Oluşturuldu',
  deleted: 'Silindi',
  companyListFailed: 'Liste alınamadı.',
  ouListFailed: 'Organizasyon birimleri alınamadı.',
  metaJsonMissing: 'metaJson yok',
  parent: 'Üst birim',
  ou: 'Organizasyon Birimleri',
  reload: 'Yenile',
  edit: 'Düzenle',
  confirmDelete: 'Bu kaydı silmek istiyor musun?',
  editNamePrompt: 'Yeni ad?',
  close: 'Kapat',
  update: 'Güncelle',
  cannotDeleteWithChildren: 'Alt birimler varken silinemez',
  success: 'Başarılı',
  optional: 'opsiyonel',
  periodFrom: 'Dönem başlangıcı',
  periodTo: 'Dönem bitişi',
  piiStrict: 'KV: sıkı',
  piiStandard: 'KV: standart',
  piiNone: 'KV: yok',
  successCreate: 'Kullanıcı oluşturuldu.',
  mfa: 'MFA',
  mfaEnabled: 'Aktif',
  mfaDisabled: 'Pasif',
  userId: 'Kimlik',
  loading: 'Yükleniyor...',
  noUsers: 'Kullanıcı bulunamadı.',
  selectUser: 'Detay görmek için kullanıcı seçin.',
  errorGeneric: 'İşlem başarısız.',
  required_pairs: 'Zorunlu alanlar eksik.',
  claimsPeriodInvalid: 'Lütfen dönem başlangıç ve bitiş tarihlerini girin.',
  permissions: 'İzinler',
  permissionsShow: 'Göster',
  permissionsHide: 'Gizle',
  permissionsNone: 'İzin bulunmuyor',
  prev: 'Önceki',
  next: 'Sonraki',
  noRoles: 'Rol yok',
  roleRemoveTitle: 'Rolü kaldır',
  roleRemoveConfirm: '"{role}" rolünü kaldırmak istiyor musun?',
  roleRemoved: 'Rol kaldırıldı.',
  roleRemoveFailed: 'Rol kaldırılamadı.',
  officers: 'Yöneticiler',
  shareholders: 'Ortaklar',
  docs: 'Belgeler',
  add: 'Ekle',
  type: 'Tip',
  userId: 'Kullanıcı kimliği',
  personName: 'Kişi adı',
  roleType: 'Rol tipi',
  percent: 'Yüzde',
  export: 'Dışa Aktar',
  docType: 'Belge türü',
  title: 'Başlık',
  url: 'URL'
});

(globalThis as any).__TP_I18N__ = base;

export function t(key: string) {
  const preferred = (localStorage.getItem('lang') || 'de').toLowerCase();
  const languages = [preferred, 'en', 'de', 'tr'];
  for (const lang of languages) {
    const dict = base[lang];
    if (dict && key in dict) {
      return dict[key];
    }
  }
  return key;
}
