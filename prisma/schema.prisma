generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  fullName   String?
  phone      String?
  preferredLanguage String? @default("de-AT")
  preferredTheme    String? @default("system")
  mfaEnabled Boolean  @default(false)
  mfaSecret  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  roles      UserRole[]
  sessions   Session[]
  externalLogins UserExternalLogin[]
  claimsJson String?
  tenantMemberships TenantUser[] @relation("UserTenantMemberships")
  officerAssignments CompanyOfficer[] @relation("UserCompanyOfficers")
}

model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  scope       String
  isSystem    Boolean   @default(false)
  isExclusive Boolean   @default(false)
  template    Boolean   @default(false)
  users       UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])
  @@id([userId, roleId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
}

model Approval {
  id              String   @id @default(cuid())
  op              String
  tenantId        String
  targetId        String?
  initiatorUserId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  status          String
  approvalsJson   String
}

model AuditLog {
  id            String   @id @default(cuid())
  ts            DateTime @default(now())
  actorId       String?
  actorEmail    String?
  tenantId      String?
  action        String
  method        String
  path          String
  targetType    String?
  targetId      String?
  status        Int
  ip            String?
  userAgent     String?
  metaJson      String?

  @@index([ts])
  @@index([actorId])
  @@index([tenantId])
  @@index([action])
}

model UserExternalLogin {
  id         String   @id @default(cuid())
  provider   String
  providerId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([provider, providerId])
}

model Task {
  id          String   @id @default(cuid())
  name        String
  description String?
  cron        String
  isEnabled   Boolean  @default(true)
  channels    String   // JSON: { email?: true, telegram?: true, inapp?: true }
  payload     String?  // JSON: { subject, body, to?, userId?, tenantId? }
  lastRunAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  runs        TaskRun[]
}

model TaskRun {
  id         String   @id @default(cuid())
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id])
  startedAt  DateTime @default(now())
  finishedAt DateTime?
  status     String   // "STARTED" | "SUCCESS" | "ERROR"
  message    String?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  tenantId  String?
  channel   String   // "email" | "telegram" | "inapp"
  subject   String?
  body      String?
  metaJson  String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([tenantId])
}

model Tenant {
  tenantId    String   @id @map("tenant_id")
  legalName   String   @map("legal_name")
  legalForm   String?  @map("legal_form")
  seatAddress String?  @map("seat_address")
  status      String   @default("Active")
  validTo     DateTime? @map("valid_to")
  createdAt   DateTime @default(now()) @map("created_at")
  users       TenantUser[]
  ous         OU[]
  companies   Company[]
  vehicles    Vehicle[]
  identityHistory TenantIdentity[]
  targetCorporateActions CorporateAction[]
  identifiers TenantIdentifier[]
  shareholdings Shareholding[]
  officers    Officer[]
  vehicleAssignments VehicleAssignment[]
  driverAssignments DriverAssignment[]
  approvals   ApprovalRequest[]
  statusEvents EntityStatusEvent[]
  organizations Organization[]
  mandates   Mandate[]

  @@map("tenants")
}

model TenantUser {
  tenantId String @map("tenant_id")
  userId   String @map("user_id")
  role     String?
  tenant   Tenant @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  user     User   @relation("UserTenantMemberships", fields: [userId], references: [id])

  @@id([tenantId, userId])
  @@map("tenant_users")
}

model OU {
  id        String  @id @default(uuid()) @map("ou_id")
  tenantId  String  @map("tenant_id")
  name      String
  parentId  String? @map("parent_id")
  tenant    Tenant  @relation(fields: [tenantId], references: [tenantId])
  parent    OU?     @relation("OUParent", fields: [parentId], references: [id])
  children  OU[]    @relation("OUParent")

  @@index([tenantId])
  @@unique([tenantId, name])
  @@map("ous")
}

model Organization {
  id           String    @id @default(uuid()) @map("org_id")
  tenantId     String    @map("tenant_id")
  name         String
  orgType      String?   @map("org_type")
  status       String    @default("Active")
  description  String?   @map("description")
  parentId     String?   @map("parent_id")
  companyId    String?   @map("company_id")
  validFrom    DateTime? @map("valid_from")
  validTo      DateTime? @map("valid_to")
  metaJson     String?   @map("meta_json")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  tenant       Tenant    @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  parent       Organization? @relation("OrganizationHierarchy", fields: [parentId], references: [id])
  children     Organization[] @relation("OrganizationHierarchy")
  mandates     Mandate[]

  @@index([tenantId])
  @@index([tenantId, status])
  @@index([parentId])
  @@index([companyId])
  @@map("organizations")
}

model Company {
  companyId   String        @id @map("company_id")
  tenantId    String        @map("tenant_id")
  legalName   String        @map("legal_name")
  address     String
  status      String        @default("Active")
  validTo     DateTime?     @map("valid_to")
  tenant      Tenant        @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  officers    CompanyOfficer[]
  shareholders Shareholder[]
  documents   CompanyDocument[]
  vehicles    Vehicle[]
  permits     CompanyPermit[]
  permitEvents CompanyPermitEvent[]
  tenantLevelOfficers Officer[] @relation("CompanyOfficerLinks")
  vehicleAssignments VehicleAssignment[]
  driverAssignments DriverAssignment[]

  @@index([tenantId])
  @@unique([tenantId, companyId])
  @@map("companies")
}

model CompanyPermit {
  id                String   @id @default(uuid())
  companyId         String   @map("company_id")
  permitType        String   @map("permit_type")
  issuingAuthority  String?  @map("issuing_authority")
  referenceNo       String?  @map("reference_no")
  permitRegisteredOn DateTime? @map("permit_registered_on")
  effectiveFrom     DateTime? @map("effective_from")
  validUntil        DateTime? @map("valid_until")
  capacityPkw       Int?     @map("capacity_pkw")
  vehicleScoped     Boolean  @default(false) @map("vehicle_scoped")
  status            String   @map("status")
  company           Company  @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  events            CompanyPermitEvent[]
  vehicleAuthorizations VehicleAuthorization[]

  @@index([companyId])
  @@map("company_permits")
}

model CompanyPermitEvent {
  id           String   @id @default(uuid())
  companyId    String   @map("company_id")
  referenceNo  String?  @map("reference_no")
  eventType    String   @map("event_type")
  eventDate    DateTime @map("event_date")
  sourceDocRef String?  @map("source_doc_ref")
  permitId     String?  @map("permit_id")
  company      Company  @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  permit       CompanyPermit? @relation(fields: [permitId], references: [id], onDelete: SetNull)

  @@index([companyId])
  @@index([permitId])
  @@map("company_permit_events")
}

model TenantIdentity {
  id          String   @id @default(uuid())
  tenantId    String   @map("tenant_id")
  currentFlag Boolean  @default(false) @map("current_flag")
  legalName   String?  @map("legal_name")
  legalForm   String?  @map("legal_form")
  seatAddress String?  @map("seat_address")
  validFrom   DateTime? @map("valid_from")
  validTo     DateTime? @map("valid_to")
  tenant      Tenant   @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, currentFlag])
  @@map("tenant_identity")
}

model TenantIdentifier {
  id          String   @id @default(uuid()) @map("id")
  tenantId    String   @map("tenant_id")
  idType      String   @map("id_type")
  idValue     String   @map("id_value")
  countryCode String?  @map("country_code")
  validFrom   DateTime? @map("valid_from")
  validTo     DateTime? @map("valid_to")
  primaryFlag Boolean  @default(false) @map("primary_flag")
  tenant      Tenant   @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)

  @@index([tenantId])
  @@index([idType])
  @@index([tenantId, primaryFlag])
  @@unique([tenantId, idType, idValue, validFrom])
  @@map("tenant_ids")
}

model Party {
  partyId     String        @id @default(uuid()) @map("party_id")
  type        String
  displayName String        @map("display_name")
  shareholdings Shareholding[]
  officers    Officer[]
  driverAssignments DriverAssignment[]

  @@map("party")
}

model Shareholding {
  id           String   @id @default(uuid()) @map("id")
  tenantId     String   @map("tenant_id")
  partyId      String   @map("party_id")
  roleType     String   @map("role_type")
  quotaPercent Float?  @map("quota_percent")
  einlageAmount Float?  @map("einlage_amount")
  liability    String?  @map("liability")
  validFrom    DateTime? @map("valid_from")
  validTo      DateTime? @map("valid_to")
  tenant       Tenant   @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  party        Party    @relation(fields: [partyId], references: [partyId], onDelete: Cascade)

  @@index([tenantId])
  @@index([partyId])
  @@map("shareholdings")
}

model Officer {
  id         String   @id @default(uuid()) @map("id")
  level      String   @map("level")
  tenantId   String?  @map("tenant_id")
  companyId  String?  @map("company_id")
  partyId    String   @map("party_id")
  officerType String  @map("officer_type")
  validFrom  DateTime? @map("valid_from")
  validTo    DateTime? @map("valid_to")
  tenant     Tenant?  @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  company    Company? @relation("CompanyOfficerLinks", fields: [companyId], references: [companyId], onDelete: Cascade)
  party      Party    @relation(fields: [partyId], references: [partyId], onDelete: Cascade)

  @@index([tenantId])
  @@index([companyId])
  @@index([partyId])
  @@map("officers")
}

model VehicleAssignment {
  id          String   @id @default(uuid()) @map("id")
  vehicleId   String   @map("vehicle_id")
  tenantId    String   @map("tenant_id")
  companyId   String   @map("company_id")
  assignedFrom DateTime @map("assigned_from")
  assignedTo  DateTime? @map("assigned_to")
  approvalId  String?  @map("approval_id")
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [vehicleId], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [companyId], onDelete: Cascade)

  @@index([vehicleId])
  @@index([tenantId])
  @@index([companyId])
  @@map("vehicle_assignments")
}

model DriverAssignment {
  id          String   @id @default(uuid()) @map("id")
  partyId     String   @map("party_id")
  tenantId    String   @map("tenant_id")
  companyId   String   @map("company_id")
  assignedFrom DateTime @map("assigned_from")
  assignedTo  DateTime? @map("assigned_to")
  approvalId  String?  @map("approval_id")
  party       Party    @relation(fields: [partyId], references: [partyId], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [companyId], onDelete: Cascade)

  @@index([partyId])
  @@index([tenantId])
  @@index([companyId])
  @@map("driver_assignments")
}

model ApprovalRequest {
  id             String   @id @default(uuid()) @map("id")
  tenantId       String   @map("tenant_id")
  scope          String   @map("scope")
  objectId       String?  @map("object_id")
  op             String   @map("op")
  payload        String?  @map("payload")
  status         String   @map("status")
  idempotencyKey String?  @map("idempotency_key") @unique
  createdAt      DateTime @default(now()) @map("created_at")
  tenant         Tenant   @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)

  @@index([tenantId])
  @@map("approvals")
}

model Attachment {
  id             String   @id @default(uuid()) @map("id")
  ownerType      String   @map("owner_type")
  ownerId        String   @map("owner_id")
  attachmentType String   @map("attachment_type")
  fileRef        String   @map("file_ref")
  issuedAt       DateTime? @map("issued_at")
  sourceUrl      String?  @map("source_url")
  createdAt      DateTime @default(now()) @map("created_at")

  @@index([ownerType, ownerId])
  @@map("attachments")
}

model EntityStatusEvent {
  id        String   @id @default(uuid()) @map("id")
  tenantId  String?  @map("tenant_id")
  entityType String  @map("entity_type")
  entityId  String   @map("entity_id")
  status    String?  @map("status")
  validTo   DateTime? @map("valid_to")
  note      String?  @map("note")
  createdAt DateTime @default(now()) @map("created_at")
  tenant    Tenant?  @relation(fields: [tenantId], references: [tenantId], onDelete: SetNull)

  @@index([tenantId])
  @@index([entityType, entityId])
  @@map("entity_status_events")
}

model CorporateAction {
  actionId       String   @id @default(uuid()) @map("action_id")
  actionType     String   @map("action_type")
  effectiveDate  DateTime @map("effective_date")
  sourceTenantIds String  @map("source_tenant_ids")
  targetTenantId String   @map("target_tenant_id")
  note           String?  @map("note")
  targetTenant   Tenant   @relation(fields: [targetTenantId], references: [tenantId], onDelete: Cascade)

  @@index([targetTenantId])
  @@index([effectiveDate])
  @@map("corporate_actions")
}

model Mandate {
  id             String    @id @default(uuid()) @map("mandate_id")
  tenantId       String    @map("tenant_id")
  organizationId String?   @map("organization_id")
  companyId      String?   @map("company_id")
  title          String
  mandateType    String    @map("mandate_type")
  status         String    @default("Draft")
  validFrom      DateTime? @map("valid_from")
  validTo        DateTime? @map("valid_to")
  notes          String?   @map("notes")
  metaJson       String?   @map("meta_json")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  tenant         Tenant    @relation(fields: [tenantId], references: [tenantId], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([tenantId])
  @@index([tenantId, status])
  @@index([organizationId])
  @@index([companyId])
  @@map("mandates")
}

model VehicleAuthorization {
  id           String   @id @default(uuid())
  permitId     String   @map("permit_id")
  vehicleId    String?  @map("vehicle_id")
  vin          String
  authorizedOn DateTime @map("authorized_on")
  revokedOn    DateTime? @map("revoked_on")
  permit       CompanyPermit @relation(fields: [permitId], references: [id], onDelete: Cascade)
  vehicle      Vehicle? @relation(fields: [vehicleId], references: [vehicleId], onDelete: SetNull)

  @@index([vehicleId])
  @@unique([permitId, vin])
  @@map("vehicle_authorizations")
}

model Vehicle {
  vehicleId String        @id @default(uuid()) @map("vehicle_id")
  tenantId  String        @map("tenant_id")
  companyId String        @map("company_id")
  vin       String        @unique
  plateNo   String?       @map("plate_no")
  seatCount Int?          @map("seat_count")
  usage     String?
  status    String        @default("Active")
  validTo   DateTime?     @map("valid_to")
  tenant    Tenant        @relation(fields: [tenantId], references: [tenantId])
  company   Company       @relation(fields: [companyId], references: [companyId])
  authorizations VehicleAuthorization[]
  assignments VehicleAssignment[]

  @@unique([tenantId, plateNo])
  @@map("vehicles")
}

model CompanyOfficer {
  id        String   @id @default(cuid())
  companyId String
  userId    String?
  type      String
  validFrom DateTime?
  validTo   DateTime?
  company   Company @relation(fields: [companyId], references: [companyId])
  user      User?   @relation("UserCompanyOfficers", fields: [userId], references: [id])
  @@index([companyId])
}

model Shareholder {
  id         String   @id @default(cuid())
  companyId  String
  personName String
  roleType   String
  percent    Float?
  company    Company @relation(fields: [companyId], references: [companyId])
  @@index([companyId])
}

model CompanyDocument {
  id        String   @id @default(cuid())
  companyId String
  title     String
  docType   String
  url       String?
  metaJson  String?
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [companyId])
  @@index([companyId])
}
