
> taxipartner-admin-suite@1.3.1093 lint
> eslint . --format json

[{"filePath":"/workspaces/taxipartner/commitlint.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/AuditDetailModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/errors/GlobalErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/errors/QueryErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/errors/RouteErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/feedback/Notice403.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/feedback/ToastProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/notifications/BellButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/notifications/Center.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/overlay/ConfirmDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/overlay/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/rbac/RequirePermission.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/table/VirtualTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/components/views/ViewsMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/data/iamAuditLogs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/data/iamPermissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/data/iamRoles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/data/iamSessions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/data/iamUsers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/_dev/RoleTenantSwitcher.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"AdapterName\" are only used as type.","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":5,"endColumn":78,"fix":{"range":[237,279],"text":"import type { AdapterName } from '../../lib/repo/index.tsx';\nimport { useRepositoryAdapter"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useMemo } from 'react';\nimport { ShieldCheck, Users } from 'lucide-react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { availableRoles, availableTenants, useGuardContext } from '../../lib/rbac/guard';\nimport { useRepositoryAdapter, AdapterName } from '../../lib/repo/index.tsx';\nimport type { RoleId } from '../../lib/rbac/policy';\n\nconst RoleTenantSwitcher: React.FC = () => {\n  const { user, currentTenantId, setRole, setCurrentTenant, setUserTenants } = useGuardContext();\n  const { adapter, setAdapter } = useRepositoryAdapter();\n  useQueryClient(); // keep cache hydrated in dev\n\n  if (!import.meta.env.DEV) {\n    return null;\n  }\n\n  const tenantAssignments = useMemo(() => new Set(user.tenantIds), [user.tenantIds]);\n\n  const handleRoleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setRole(event.target.value as RoleId);\n  };\n\n  const handleTenantToggle = (tenantId: string, checked: boolean) => {\n    const next = new Set(user.tenantIds);\n    if (checked) {\n      next.add(tenantId);\n    } else {\n      next.delete(tenantId);\n    }\n    setUserTenants(Array.from(next));\n  };\n\n  const handleCurrentTenantChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value;\n    setCurrentTenant(value === 'none' ? null : value);\n  };\n\n  return (\n    <section className=\"flex flex-col gap-4 rounded-2xl border border-dashed border-slate-300 bg-slate-50 p-4 text-left text-sm text-slate-600 shadow-inner dark:border-slate-700 dark:bg-slate-900 dark:text-slate-300\">\n      <header className=\"flex items-center gap-3\">\n        <span className=\"inline-flex h-8 w-8 items-center justify-center rounded-full bg-slate-900 text-white dark:bg-slate-100 dark:text-slate-900\">\n          <ShieldCheck className=\"h-4 w-4\" aria-hidden=\"true\" />\n        </span>\n        <div>\n          <p className=\"text-sm font-semibold text-slate-900 dark:text-slate-100\">\n            DevTools Â· RBAC Switcher\n          </p>\n          <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n            Emulate roles and tenant context locally. Only available in development.\n          </p>\n        </div>\n      </header>\n\n      <div className=\"space-y-3\">\n        <label className=\"flex flex-col gap-1\">\n          <span className=\"text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400\">\n            Active role\n          </span>\n          <select\n            value={user.role}\n            onChange={handleRoleChange}\n            className=\"rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-700 focus:border-slate-500 focus:outline-none focus-visible:ring-2 focus-visible:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100\"\n          >\n            {availableRoles.map(role => (\n              <option key={role.id} value={role.id}>\n                {role.label}\n              </option>\n            ))}\n          </select>\n        </label>\n\n        <div>\n          <p className=\"mb-1 flex items-center gap-2 text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400\">\n            <Users className=\"h-3.5 w-3.5\" aria-hidden=\"true\" />\n            Tenant membership\n          </p>\n          <div className=\"grid gap-2\">\n            {availableTenants.map(tenant => {\n              const checked = tenantAssignments.has(tenant.id);\n              return (\n                <label\n                  key={tenant.id}\n                  className=\"flex items-center justify-between rounded-lg border border-slate-200 bg-white px-3 py-2 text-sm text-slate-600 shadow-sm transition hover:border-slate-300 focus-within:border-slate-500 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200\"\n                >\n                  <span>{tenant.name}</span>\n                  <input\n                    type=\"checkbox\"\n                    checked={checked}\n                    onChange={event => handleTenantToggle(tenant.id, event.target.checked)}\n                    className=\"h-4 w-4 rounded border-slate-300 text-slate-700 focus:ring-slate-500 dark:border-slate-600\"\n                  />\n                </label>\n              );\n            })}\n          </div>\n        </div>\n\n        <label className=\"flex flex-col gap-1\">\n          <span className=\"text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400\">\n            Current tenant context\n          </span>\n          <select\n            value={currentTenantId ?? 'none'}\n            onChange={handleCurrentTenantChange}\n            className=\"rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-700 focus:border-slate-500 focus:outline-none focus-visible:ring-2 focus-visible:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100\"\n          >\n            <option value=\"none\">None (global)</option>\n            {availableTenants.map(tenant => (\n              <option key={tenant.id} value={tenant.id}>\n                {tenant.name}\n              </option>\n            ))}\n          </select>\n        </label>\n\n        <label className=\"flex flex-col gap-1\">\n          <span className=\"text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400\">\n            Repository adapter\n          </span>\n          <select\n            value={adapter}\n            onChange={event => handleAdapterChange(event.target.value as AdapterName)}\n            className=\"rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-700 focus:border-slate-500 focus:outline-none focus-visible:ring-2 focus-visible:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100\"\n          >\n            <option value=\"memory\">Memory (mock)</option>\n            <option value=\"http\">HTTP (API)</option>\n          </select>\n        </label>\n      </div>\n    </section>\n  );\n};\n\nexport default RoleTenantSwitcher;\n  const handleAdapterChange = (next: AdapterName) => {\n    setAdapter(next);\n    queryClient.clear();\n  };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/audit/__tests__/keys.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/audit/api.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"useQueryClient\" are only used as type.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":1,"endColumn":84,"fix":{"range":[0,51],"text":"import type { useQueryClient } from '@tanstack/react-query';\nimport { keepPreviousData, useQuery"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { keepPreviousData, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useAuditRepository, RepositoryError, normalizeError } from '../../lib/repo';\nimport type { AuditListQuery, AuditEvent, AuditListResult } from '../../lib/repo/audit';\nimport { push } from '../../lib/notifications/store';\n\nexport const auditKeys = {\n  all: ['audit'] as const,\n  list: (params: AuditListQuery) =>\n    [\n      'audit',\n      params.q ?? '',\n      params.user ?? '',\n      params.action ?? '',\n      params.from ?? '',\n      params.to ?? '',\n      params.page ?? 0,\n      params.pageSize ?? 25,\n      params.sort ?? 'ts',\n      params.order ?? 'desc'\n    ] as const,\n  detail: (id: string) => ['audit', 'detail', id] as const\n};\n\nconst notifyError = (error: unknown) => {\n  const normalized = error instanceof RepositoryError ? error : normalizeError(error);\n  push({\n    type: 'error',\n    title: 'Audit feed error',\n    body: normalized.message\n  });\n};\n\nexport const useAuditList = (params: AuditListQuery) => {\n  const repo = useAuditRepository();\n  return useQuery<AuditListResult, unknown>({\n    queryKey: auditKeys.list(params),\n    queryFn: () => repo.list(params),\n    placeholderData: keepPreviousData,\n    retry: false,\n    onError: notifyError\n  });\n};\n\nexport const useAuditEvent = (id: string | null) => {\n  const repo = useAuditRepository();\n  return useQuery<AuditEvent | null, unknown>({\n    queryKey: id ? auditKeys.detail(id) : ['audit', 'detail', 'none'],\n    queryFn: () => (id ? repo.get(id) : Promise.resolve(null)),\n    enabled: Boolean(id),\n    retry: false,\n    onError: notifyError\n  });\n};\n\nexport const prependAuditEvent = (client: ReturnType<typeof useQueryClient>, event: AuditEvent) => {\n  const queries = client.getQueriesData<{ items: AuditEvent[]; total: number }>({ queryKey: auditKeys.all });\n  queries.forEach(([key, data]) => {\n    if (!data) return;\n    client.setQueryData(key, {\n      items: [event, ...data.items].slice(0, data.items.length),\n      total: data.total + 1\n    });\n  });\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/compliance/api.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":80,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":80,"endColumn":66,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2752,2752],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2752,2752],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":97,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":97,"endColumn":83,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3367,3367],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3367,3367],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":122,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":122,"endColumn":66,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4250,4250],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4250,4250],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":128,"column":3,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":128,"endColumn":71,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4446,4446],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4446,4446],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport type {\n  ComplianceListQuery,\n  ComplianceRecord,\n  CreateComplianceInput,\n  UpdateComplianceInput\n} from '../../lib/repo/compliance/types';\nimport {\n  useComplianceRepository,\n  RepositoryError,\n  normalizeError\n} from '../../lib/repo/index.tsx';\nimport { push } from '../../lib/notifications/store';\n\nexport const complianceKeys = {\n  all: ['compliance'] as const,\n  list: (params: ComplianceListQuery) =>\n    ['compliance', params.category, params.q ?? '', (params.status ?? []).join(','), params.sort ?? '', params.order ?? 'asc', params.page ?? 0, params.pageSize ?? 10, (params.cols ?? []).join(',')] as const,\n  detail: (id: string) => ['compliance', 'detail', id] as const\n};\n\nconst notifyError = (title: string, error: unknown) => {\n  const normalized = error instanceof RepositoryError ? error : normalizeError(error);\n  push({\n    type: 'error',\n    title,\n    body: normalized.message\n  });\n};\n\nexport const useComplianceList = (params: ComplianceListQuery) => {\n  const repo = useComplianceRepository();\n  return useQuery({\n    queryKey: complianceKeys.list(params),\n    queryFn: () => repo.list(params),\n    keepPreviousData: true\n  });\n};\n\nexport const useComplianceItem = (id: string | null) => {\n  const repo = useComplianceRepository();\n  return useQuery({\n    queryKey: id ? complianceKeys.detail(id) : ['compliance', 'detail', 'none'],\n    queryFn: () => (id ? repo.get(id) : Promise.resolve(null)),\n    enabled: Boolean(id)\n  });\n};\n\nconst updateListCache = (client: ReturnType<typeof useQueryClient>, item: ComplianceRecord) => {\n  const targets = client.getQueriesData<{ items: ComplianceRecord[]; total: number }>({ queryKey: complianceKeys.all });\n  targets.forEach(([key, data]) => {\n    if (!data) return;\n    client.setQueryData(key, {\n      ...data,\n      items: data.items.map(existing => (existing.id === item.id ? item : existing))\n    });\n  });\n};\n\nexport const useCreateCompliance = () => {\n  const repo = useComplianceRepository();\n  const client = useQueryClient();\n\n  return useMutation({\n    mutationFn: (input: CreateComplianceInput) => repo.create(input),\n    onSuccess: record => {\n      const targets = client.getQueriesData<{ items: ComplianceRecord[]; total: number }>({ queryKey: complianceKeys.all });\n      targets.forEach(([key, data]) => {\n        if (!data) return;\n        client.setQueryData(key, {\n          ...data,\n          items: [record, ...data.items],\n          total: data.total + 1\n        });\n      });\n      push({ type: 'success', title: 'Compliance item created', body: record.name });\n    },\n    onError: error => notifyError('Failed to create compliance item', error),\n    onSettled: () => {\n      client.invalidateQueries({ queryKey: complianceKeys.all });\n    }\n  });\n};\n\nexport const useUpdateCompliance = () => {\n  const repo = useComplianceRepository();\n  const client = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, input }: { id: string; input: UpdateComplianceInput }) => repo.update(id, input),\n    onSuccess: record => {\n      updateListCache(client, record);\n      push({ type: 'success', title: 'Compliance item updated', body: record.name });\n    },\n    onError: error => notifyError('Failed to update compliance item', error),\n    onSettled: (_data, _error, variables) => {\n      client.invalidateQueries({ queryKey: complianceKeys.detail(variables.id) });\n    }\n  });\n};\n\nexport const useDeleteCompliance = () => {\n  const repo = useComplianceRepository();\n  const client = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => repo.remove(id),\n    onSuccess: (_data, id) => {\n      const targets = client.getQueriesData<{ items: ComplianceRecord[]; total: number }>({ queryKey: complianceKeys.all });\n      targets.forEach(([key, data]) => {\n        if (!data) return;\n        client.setQueryData(key, {\n          ...data,\n          items: data.items.filter(item => item.id !== id),\n          total: Math.max(0, data.total - 1)\n        });\n      });\n      push({ type: 'success', title: 'Compliance item deleted', body: id });\n    },\n    onError: error => notifyError('Failed to delete compliance item', error),\n    onSettled: () => {\n      client.invalidateQueries({ queryKey: complianceKeys.all });\n    }\n  });\n};\n\nexport const invalidateComplianceList = (client: ReturnType<typeof useQueryClient>, params: ComplianceListQuery) => {\n  client.invalidateQueries({ queryKey: complianceKeys.list(params) });\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/program/audits/AuditDetailsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/program/goals/GoalDetailsPage.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"All imports in the declaration are only used as types. Use `import type`.","line":8,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":8,"endColumn":67,"fix":{"range":[483,483],"text":" type"}},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"All imports in the declaration are only used as types. Use `import type`.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":9,"endColumn":64,"fix":{"range":[550,550],"text":" type"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { ArrowLeft, ClipboardList, Clock, Loader2, Pencil, Trash2, User } from 'lucide-react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport Modal from '../../../components/overlay/Modal';\nimport ConfirmDialog from '../../../components/overlay/ConfirmDialog';\nimport GoalForm from './GoalForm';\nimport QueryErrorBoundary from '../../../components/errors/QueryErrorBoundary';\nimport { GoalDynamicStatus } from '../../../lib/repo/goals/types';\nimport { GoalFormValues } from '../../../lib/forms/validation';\nimport { useGoal, useUpdateGoal, useDeleteGoal } from '../../../features/program/goals/api';\n\nconst statusBadgeStyles: Record<GoalDynamicStatus, string> = {\n  ok: 'bg-emerald-100 text-emerald-700 dark:bg-emerald-500/15 dark:text-emerald-300',\n  warn: 'bg-amber-100 text-amber-700 dark:bg-amber-500/15 dark:text-amber-200',\n  risk: 'bg-rose-100 text-rose-700 dark:bg-rose-500/15 dark:text-rose-300'\n};\n\nconst statusLabels: Record<GoalDynamicStatus, string> = {\n  ok: 'On Track',\n  warn: 'At Risk',\n  risk: 'Blocked'\n};\n\nconst formatDateTime = (value: string) => {\n  try {\n    return new Intl.DateTimeFormat('en-GB', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(new Date(value));\n  } catch (_) {\n    return 'â';\n  }\n};\n\nconst formatDate = (value: string) => {\n  try {\n    return new Intl.DateTimeFormat('en-GB', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric'\n    }).format(new Date(value));\n  } catch (_) {\n    return 'â';\n  }\n};\n\nconst GoalDetailsPageContent: React.FC = () => {\n  const { goalId } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const headingRef = useRef<HTMLHeadingElement>(null);\n  const { data: goal, isLoading, isError, error } = useGoal(goalId ?? null);\n  const updateGoal = useUpdateGoal();\n  const deleteGoal = useDeleteGoal();\n  const [confirmDeleteOpen, setConfirmDeleteOpen] = useState(false);\n\n  const searchParams = useMemo(() => new URLSearchParams(location.search), [location.search]);\n  const modal = searchParams.get('modal');\n\n  useEffect(() => {\n    if (goal) {\n      headingRef.current?.focus();\n    }\n  }, [goal?.id]);\n\n  if (!goalId) {\n    return (\n      <section className=\"flex flex-1 flex-col gap-6\">\n        <button\n          type=\"button\"\n          onClick={() => navigate('/program/goals')}\n          className=\"inline-flex items-center gap-2 self-start rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" aria-hidden=\"true\" />\n          Back to goals\n        </button>\n        <div className=\"flex flex-1 flex-col items-center justify-center rounded-2xl border border-dashed border-slate-300 bg-white/70 p-12 text-center text-sm text-slate-500 dark:border-slate-700 dark:bg-slate-900/70 dark:text-slate-300\">\n          <ClipboardList className=\"mb-3 h-10 w-10 text-slate-400 dark:text-slate-500\" aria-hidden=\"true\" />\n          <p className=\"font-semibold text-slate-700 dark:text-slate-200\">Goal not found</p>\n        </div>\n      </section>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <section className=\"flex flex-1 flex-col gap-6\" aria-busy=\"true\">\n        <div className=\"flex items-center gap-3 text-sm text-slate-500 dark:text-slate-300\">\n          <ArrowLeft className=\"h-4 w-4\" aria-hidden=\"true\" />\n          <span>Loading goalâ¦</span>\n        </div>\n        <div className=\"flex flex-col gap-4 rounded-2xl border border-slate-200 bg-white p-6 shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n          <div className=\"h-6 w-48 animate-pulse rounded bg-slate-200 dark:bg-slate-700\" />\n          <div className=\"h-4 w-full animate-pulse rounded bg-slate-200/70 dark:bg-slate-700/60\" />\n          <div className=\"h-4 w-2/3 animate-pulse rounded bg-slate-200/70 dark:bg-slate-700/60\" />\n        </div>\n      </section>\n    );\n  }\n\n  if (isError) {\n    throw error ?? new Error('Failed to load goal');\n  }\n\n  if (!goal) {\n    return (\n      <section className=\"flex flex-1 flex-col gap-6\">\n        <button\n          type=\"button\"\n          onClick={() => navigate('/program/goals')}\n          className=\"inline-flex items-center gap-2 self-start rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" aria-hidden=\"true\" />\n          Back to goals\n        </button>\n        <div className=\"flex flex-1 flex-col items-center justify-center rounded-2xl border border-dashed border-slate-300 bg-white/70 p-12 text-center text-sm text-slate-500 dark:border-slate-700 dark:bg-slate-900/70 dark:text-slate-300\">\n          <ClipboardList className=\"mb-3 h-10 w-10 text-slate-400 dark:text-slate-500\" aria-hidden=\"true\" />\n          <p className=\"font-semibold text-slate-700 dark:text-slate-200\">Goal not found</p>\n        </div>\n      </section>\n    );\n  }\n\n  const openEditModal = () => {\n    const params = new URLSearchParams(location.search);\n    params.set('modal', 'edit');\n    params.set('modalGoal', goal.id);\n    navigate({ pathname: location.pathname, search: params.toString() }, { replace: false });\n  };\n\n  const closeModal = () => {\n    const params = new URLSearchParams(location.search);\n    params.delete('modal');\n    params.delete('modalGoal');\n    navigate({ pathname: location.pathname, search: params.toString() }, { replace: true });\n  };\n\n  const handleEdit = async (values: GoalFormValues) => {\n    await updateGoal.mutateAsync({ id: goal.id, input: values });\n    closeModal();\n  };\n\n  const handleDelete = async () => {\n    await deleteGoal.mutateAsync(goal.id);\n    navigate('/program/goals');\n  };\n\n  const editModalOpen = modal === 'edit';\n\n  return (\n    <section className=\"flex flex-1 flex-col gap-6\">\n      <button\n        type=\"button\"\n        onClick={() => navigate(-1)}\n        className=\"inline-flex items-center gap-2 self-start rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n      >\n        <ArrowLeft className=\"h-4 w-4\" aria-hidden=\"true\" />\n        Back\n      </button>\n\n      <header className=\"flex flex-wrap items-start justify-between gap-4\">\n        <div>\n          <h1\n            ref={headingRef}\n            tabIndex={-1}\n            className=\"text-2xl font-semibold text-slate-900 outline-none focus-visible:ring-2 focus-visible:ring-slate-500/60 dark:text-slate-100\"\n          >\n            {goal.name}\n          </h1>\n          <p className=\"mt-1 text-sm text-slate-500 dark:text-slate-400\">\n            Keep program stakeholders aligned and provide visibility into progress updates.\n          </p>\n        </div>\n        <div className=\"flex flex-wrap items-center gap-3\">\n          <button\n            type=\"button\"\n            onClick={openEditModal}\n            className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            <Pencil className=\"h-4 w-4\" aria-hidden=\"true\" />\n            Edit\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => setConfirmDeleteOpen(true)}\n            className=\"inline-flex items-center gap-2 rounded-lg border border-rose-200 px-3 py-1.5 text-sm font-semibold text-rose-600 transition hover:bg-rose-50 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-rose-500 dark:border-rose-500/40 dark:text-rose-300 dark:hover:bg-rose-500/20\"\n          >\n            <Trash2 className=\"h-4 w-4\" aria-hidden=\"true\" />\n            Delete\n          </button>\n        </div>\n      </header>\n\n      <section\n        aria-labelledby=\"goal-overview\"\n        className=\"grid gap-4 rounded-2xl border border-slate-200 bg-white p-6 shadow-sm dark:border-slate-800 dark:bg-slate-900\"\n      >\n        <h2 id=\"goal-overview\" className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n          Overview\n        </h2>\n        <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-4\">\n          <div className=\"rounded-xl border border-slate-200 bg-slate-50 p-4 dark:border-slate-700 dark:bg-slate-800/60\">\n            <p className=\"text-xs uppercase tracking-wide text-slate-500\">Status</p>\n            <p\n              className={`mt-2 inline-flex items-center gap-2 rounded-full px-3 py-1 text-sm font-medium ${statusBadgeStyles[goal.dynamicStatus]}`}\n            >\n              <span className=\"h-1.5 w-1.5 rounded-full bg-current\" />\n              {statusLabels[goal.dynamicStatus]}\n            </p>\n          </div>\n          <div className=\"rounded-xl border border-slate-200 bg-slate-50 p-4 dark:border-slate-700 dark:bg-slate-800/60\">\n            <p className=\"text-xs uppercase tracking-wide text-slate-500\">Audits completed</p>\n            <p className=\"mt-2 text-2xl font-semibold text-slate-900 dark:text-slate-100\">{goal.audits}</p>\n          </div>\n          <div className=\"rounded-xl border border-slate-200 bg-slate-50 p-4 dark:border-slate-700 dark:bg-slate-800/60\">\n            <p className=\"text-xs uppercase tracking-wide text-slate-500\">Owner</p>\n            <p className=\"mt-2 inline-flex items-center gap-2 text-sm text-slate-700 dark:text-slate-200\">\n              <User className=\"h-4 w-4\" aria-hidden=\"true\" />\n              {goal.owner}\n            </p>\n          </div>\n          <div className=\"rounded-xl border border-slate-200 bg-slate-50 p-4 dark:border-slate-700 dark:bg-slate-800/60\">\n            <p className=\"text-xs uppercase tracking-wide text-slate-500\">Last updated</p>\n            <p className=\"mt-2 inline-flex items-center gap-2 text-sm text-slate-700 dark:text-slate-200\">\n              <Clock className=\"h-4 w-4\" aria-hidden=\"true\" />\n              {formatDateTime(goal.updatedAt)}\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <section\n        aria-labelledby=\"goal-metadata\"\n        className=\"grid gap-4 rounded-2xl border border-slate-200 bg-white p-6 shadow-sm dark:border-slate-800 dark:bg-slate-900\"\n      >\n        <h2 id=\"goal-metadata\" className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n          Metadata\n        </h2>\n        <dl className=\"grid gap-4 sm:grid-cols-2\">\n          <div>\n            <dt className=\"text-xs uppercase tracking-wide text-slate-500\">Identifier</dt>\n            <dd className=\"mt-2 font-medium text-slate-800 dark:text-slate-100\">{goal.id}</dd>\n          </div>\n          <div>\n            <dt className=\"text-xs uppercase tracking-wide text-slate-500\">Created</dt>\n            <dd className=\"mt-2 text-sm text-slate-700 dark:text-slate-200\">{formatDate(goal.createdAt)}</dd>\n          </div>\n          <div>\n            <dt className=\"text-xs uppercase tracking-wide text-slate-500\">Updated</dt>\n            <dd className=\"mt-2 text-sm text-slate-700 dark:text-slate-200\">{formatDate(goal.updatedAt)}</dd>\n          </div>\n          <div>\n            <dt className=\"text-xs uppercase tracking-wide text-slate-500\">Last audit</dt>\n            <dd className=\"mt-2 text-sm text-slate-700 dark:text-slate-200\">{formatDate(goal.lastAuditAt)}</dd>\n          </div>\n        </dl>\n      </section>\n\n      <section\n        aria-labelledby=\"goal-activity\"\n        className=\"flex flex-col gap-4 rounded-2xl border border-slate-200 bg-white p-6 shadow-sm dark:border-slate-800 dark:bg-slate-900\"\n      >\n        <div className=\"flex items-center gap-2\">\n          <h2 id=\"goal-activity\" className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n            Activity &amp; notes\n          </h2>\n          <span className=\"rounded-full bg-slate-100 px-2 py-0.5 text-xs text-slate-500 dark:bg-slate-800 dark:text-slate-300\">\n            Read only\n          </span>\n        </div>\n        <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n          Surface updates from audits, stakeholders, and pending actions here. The panel will sync with audit workflow data in v0.5.\n        </p>\n        <div className=\"rounded-xl border border-dashed border-slate-300 p-6 text-center text-sm text-slate-500 dark:border-slate-700 dark:text-slate-400\">\n          <Loader2 className=\"mx-auto mb-3 h-6 w-6 animate-spin text-slate-400\" aria-hidden=\"true\" />\n          Timeline streaming soon. Add updates via the audit workspace in the meantime.\n        </div>\n      </section>\n\n      <Modal\n        isOpen={editModalOpen}\n        onClose={closeModal}\n        title=\"Edit goal\"\n        description={goal ? `Update ${goal.name} and keep stakeholders in sync.` : undefined}\n      >\n        <GoalForm\n          initialValues={goal ?? undefined}\n          onSubmit={async values => {\n            await handleEdit(values);\n          }}\n          onCancel={closeModal}\n          submitLabel=\"Save changes\"\n          busy={updateGoal.isPending}\n        />\n      </Modal>\n\n      <ConfirmDialog\n        isOpen={confirmDeleteOpen}\n        title=\"Delete goal\"\n        description={goal ? `This will remove ${goal.name} from the program goals.` : undefined}\n        confirmLabel={deleteGoal.isPending ? 'Deletingâ¦' : 'Delete'}\n        onConfirm={handleDelete}\n        onCancel={() => setConfirmDeleteOpen(false)}\n        loading={deleteGoal.isPending}\n      />\n    </section>\n  );\n};\n\nconst GoalDetailsPage: React.FC = () => (\n  <QueryErrorBoundary>\n    <GoalDetailsPageContent />\n  </QueryErrorBoundary>\n);\n\nexport default GoalDetailsPage;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/program/goals/GoalForm.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"All imports in the declaration are only used as types. Use `import type`.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":2,"endColumn":67,"fix":{"range":[67,67],"text":" type"}},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"GoalFormValues\" are only used as type.","line":3,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":3,"endColumn":86,"fix":{"range":[128,173],"text":"import type { GoalFormValues } from '../../../lib/forms/validation';\nimport { coerceGoalFormSchema"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import React, { useEffect, useMemo, useState } from 'react';\nimport { GoalDynamicStatus } from '../../../lib/repo/goals/types';\nimport { coerceGoalFormSchema, GoalFormValues } from '../../../lib/forms/validation';\n\ntype GoalFormState = {\n  name: string;\n  owner: string;\n  dynamicStatus: GoalDynamicStatus;\n  audits: string;\n};\n\ntype FieldErrors = Partial<Record<keyof GoalFormState, string>>;\n\ntype GoalFormProps = {\n  initialValues?: Partial<GoalFormValues>;\n  onSubmit: (values: GoalFormValues) => Promise<void> | void;\n  onCancel: () => void;\n  submitLabel?: string;\n  busy?: boolean;\n};\n\nconst defaultState: GoalFormState = {\n  name: '',\n  owner: '',\n  dynamicStatus: 'ok',\n  audits: '0'\n};\n\nconst statusOptions: Array<{ value: GoalDynamicStatus; label: string }> = [\n  { value: 'ok', label: 'On Track' },\n  { value: 'warn', label: 'At Risk' },\n  { value: 'risk', label: 'Blocked' }\n];\n\nconst toState = (values?: Partial<GoalFormValues>): GoalFormState => ({\n  name: values?.name ?? defaultState.name,\n  owner: values?.owner ?? defaultState.owner,\n  dynamicStatus: values?.dynamicStatus ?? defaultState.dynamicStatus,\n  audits: values?.audits !== undefined ? String(values.audits) : defaultState.audits\n});\n\nconst parseState = (state: GoalFormState) =>\n  coerceGoalFormSchema.safeParse({\n    ...state,\n    audits: state.audits\n  });\n\nexport const GoalForm: React.FC<GoalFormProps> = ({\n  initialValues,\n  onSubmit,\n  onCancel,\n  submitLabel = 'Save goal',\n  busy = false\n}) => {\n  const [state, setState] = useState<GoalFormState>(() => toState(initialValues));\n  const [fieldErrors, setFieldErrors] = useState<FieldErrors>({});\n  const [formError, setFormError] = useState<string | null>(null);\n\n  useEffect(() => {\n    setState(toState(initialValues));\n    setFieldErrors({});\n    setFormError(null);\n  }, [initialValues]);\n\n  const validation = useMemo(() => parseState(state), [state]);\n  const isValid = validation.success;\n\n  useEffect(() => {\n    if (validation.success) {\n      setFieldErrors({});\n      return;\n    }\n    const nextErrors: FieldErrors = {};\n    validation.error.issues.forEach(issue => {\n      const path = issue.path[0];\n      if (typeof path === 'string') {\n        nextErrors[path as keyof GoalFormState] = issue.message;\n      }\n    });\n    setFieldErrors(nextErrors);\n  }, [validation]);\n\n  const handleChange = (field: keyof GoalFormState) => (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const value = event.target.value;\n    setState(prev => ({\n      ...prev,\n      [field]: field === 'audits' ? value.replace(/[^0-9]/g, '') : value\n    }));\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!validation.success || busy) {\n      return;\n    }\n    setFormError(null);\n    try {\n      await onSubmit(validation.data);\n    } catch (error) {\n      const message =\n        error instanceof Error ? error.message : 'We could not save the goal. Please try again.';\n      setFormError(message);\n    }\n  };\n\n  return (\n    <form className=\"flex flex-col gap-6\" onSubmit={handleSubmit} noValidate>\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex flex-col\">\n          <label htmlFor=\"goal-name\" className=\"text-sm font-medium text-slate-700 dark:text-slate-200\">\n            Goal name\n          </label>\n          <input\n            id=\"goal-name\"\n            name=\"name\"\n            type=\"text\"\n            value={state.name}\n            onChange={handleChange('name')}\n            required\n            aria-invalid={Boolean(fieldErrors.name)}\n            aria-describedby={fieldErrors.name ? 'goal-name-error' : undefined}\n            className=\"mt-1 rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100\"\n            maxLength={120}\n          />\n          {fieldErrors.name ? (\n            <p id=\"goal-name-error\" className=\"mt-1 text-sm text-rose-500\">\n              {fieldErrors.name}\n            </p>\n          ) : null}\n        </div>\n\n        <div className=\"flex flex-col\">\n          <label htmlFor=\"goal-owner\" className=\"text-sm font-medium text-slate-700 dark:text-slate-200\">\n            Owner\n          </label>\n          <input\n            id=\"goal-owner\"\n            name=\"owner\"\n            type=\"text\"\n            value={state.owner}\n            onChange={handleChange('owner')}\n            required\n            aria-invalid={Boolean(fieldErrors.owner)}\n            aria-describedby={fieldErrors.owner ? 'goal-owner-error' : undefined}\n            className=\"mt-1 rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100\"\n            maxLength={80}\n          />\n          {fieldErrors.owner ? (\n            <p id=\"goal-owner-error\" className=\"mt-1 text-sm text-rose-500\">\n              {fieldErrors.owner}\n            </p>\n          ) : null}\n        </div>\n\n        <div className=\"flex flex-col\">\n          <label htmlFor=\"goal-status\" className=\"text-sm font-medium text-slate-700 dark:text-slate-200\">\n            Status\n          </label>\n          <select\n            id=\"goal-status\"\n            name=\"dynamicStatus\"\n            value={state.dynamicStatus}\n            onChange={handleChange('dynamicStatus')}\n            className=\"mt-1 rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100\"\n          >\n            {statusOptions.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"flex flex-col\">\n          <label htmlFor=\"goal-audits\" className=\"text-sm font-medium text-slate-700 dark:text-slate-200\">\n            Completed audits\n          </label>\n          <input\n            id=\"goal-audits\"\n            name=\"audits\"\n            type=\"number\"\n            inputMode=\"numeric\"\n            min={0}\n            value={state.audits}\n            onChange={handleChange('audits')}\n            required\n            aria-invalid={Boolean(fieldErrors.audits)}\n            aria-describedby={fieldErrors.audits ? 'goal-audits-error' : undefined}\n            className=\"mt-1 w-32 rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-800 shadow-sm focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100\"\n          />\n          {fieldErrors.audits ? (\n            <p id=\"goal-audits-error\" className=\"mt-1 text-sm text-rose-500\">\n              {fieldErrors.audits}\n            </p>\n          ) : null}\n        </div>\n      </div>\n\n      {formError ? <div className=\"rounded-lg bg-rose-50 px-4 py-3 text-sm text-rose-700 dark:bg-rose-500/20 dark:text-rose-200\">{formError}</div> : null}\n\n      <div className=\"flex justify-end gap-3\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"inline-flex items-center justify-center rounded-lg border border-slate-200 px-4 py-2 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-200 dark:hover:bg-slate-800\"\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          disabled={!isValid || busy}\n          className=\"inline-flex items-center justify-center rounded-lg bg-slate-900 px-4 py-2 text-sm font-semibold text-white transition hover:bg-slate-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:cursor-not-allowed disabled:opacity-60 dark:bg-slate-100 dark:text-slate-900 dark:hover:bg-slate-200\"\n        >\n          {busy ? 'Savingâ¦' : submitLabel}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default GoalForm;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/program/goals/api.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"QueryClient\" are only used as type.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":1,"endColumn":92,"fix":{"range":[0,59],"text":"import type { QueryClient } from '@tanstack/react-query';\nimport { useMutation, useQuery, useQueryClient"}},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":89,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":89,"endColumn":61,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2916,2916],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2916,2916],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":122,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":122,"endColumn":78,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4189,4189],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4189,4189],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":151,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":151,"endColumn":61,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5137,5137],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5137,5137],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":157,"column":3,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":157,"endColumn":57,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5272,5272],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5272,5272],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useMutation, useQuery, useQueryClient, QueryClient } from '@tanstack/react-query';\nimport type { GoalsListQuery, GoalRecord, CreateGoalInput, UpdateGoalInput } from '../../lib/repo/goals/types';\nimport { useGoalsRepository, RepositoryError, normalizeError } from '../../../lib/repo/index.tsx';\nimport { goalsKeys } from '../../../lib/query/keys';\nimport { push } from '../../../lib/notifications/store';\n\nconst notifyError = (title: string, error: unknown) => {\n  const normalized = error instanceof RepositoryError ? error : normalizeError(error);\n  push({\n    type: 'error',\n    title,\n    body: normalized.message\n  });\n};\n\nexport const useGoalsList = (params: GoalsListQuery) => {\n  const repo = useGoalsRepository();\n  return useQuery({\n    queryKey: goalsKeys.list(params),\n    queryFn: () => repo.list(params),\n    keepPreviousData: true\n  });\n};\n\nexport const useGoal = (id: string | null | undefined) => {\n  const repo = useGoalsRepository();\n  return useQuery({\n    queryKey: id ? goalsKeys.detail(id) : ['goals', 'detail', 'none'],\n    queryFn: () => (id ? repo.get(id) : Promise.resolve(null)),\n    enabled: Boolean(id)\n  });\n};\n\nconst updateCachesAfterCreate = (\n  client: QueryClient,\n  created: GoalRecord\n) => {\n  const targets = client.getQueriesData<{ items: GoalRecord[]; total: number }>({ queryKey: goalsKeys.all });\n  targets.forEach(([key, data]) => {\n    if (!data) return;\n    client.setQueryData(key, {\n      ...data,\n      items: [created, ...data.items],\n      total: data.total + 1\n    });\n  });\n};\n\nconst updateCachesAfterUpdate = (\n  client: QueryClient,\n  updated: GoalRecord\n) => {\n  const targets = client.getQueriesData<{ items: GoalRecord[]; total: number }>({ queryKey: goalsKeys.all });\n  targets.forEach(([key, data]) => {\n    if (!data) return;\n    client.setQueryData(key, {\n      ...data,\n      items: data.items.map(item => (item.id === updated.id ? updated : item))\n    });\n  });\n  client.setQueryData(goalsKeys.detail(updated.id), updated);\n};\n\nconst updateCachesAfterDelete = (client: QueryClient, id: string) => {\n  const targets = client.getQueriesData<{ items: GoalRecord[]; total: number }>({ queryKey: goalsKeys.all });\n  targets.forEach(([key, data]) => {\n    if (!data) return;\n    client.setQueryData(key, {\n      ...data,\n      items: data.items.filter(item => item.id !== id),\n      total: Math.max(0, data.total - 1)\n    });\n  });\n  client.removeQueries({ queryKey: goalsKeys.detail(id) });\n};\n\nexport const useCreateGoal = () => {\n  const repo = useGoalsRepository();\n  const client = useQueryClient();\n\n  return useMutation({\n    mutationFn: (input: CreateGoalInput) => repo.create(input),\n    onSuccess: goal => {\n      updateCachesAfterCreate(client, goal);\n      push({ type: 'success', title: 'Goal created', body: `${goal.name} added.` });\n    },\n    onError: error => notifyError('Failed to create goal', error),\n    onSettled: () => {\n      client.invalidateQueries({ queryKey: goalsKeys.all });\n    }\n  });\n};\n\nexport const useUpdateGoal = () => {\n  const repo = useGoalsRepository();\n  const client = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, input }: { id: string; input: UpdateGoalInput }) => repo.update(id, input),\n    onMutate: async ({ id, input }) => {\n      await client.cancelQueries({ queryKey: goalsKeys.detail(id) });\n      const previous = client.getQueryData<GoalRecord>(goalsKeys.detail(id));\n      if (previous) {\n        const optimistic = { ...previous, ...input, updatedAt: new Date().toISOString() } as GoalRecord;\n        client.setQueryData(goalsKeys.detail(id), optimistic);\n        updateCachesAfterUpdate(client, optimistic);\n      }\n      return { previous };\n    },\n    onError: (error, variables, context) => {\n      if (context?.previous) {\n        client.setQueryData(goalsKeys.detail(variables.id), context.previous);\n        updateCachesAfterUpdate(client, context.previous);\n      }\n      notifyError('Failed to update goal', error);\n    },\n    onSuccess: goal => {\n      updateCachesAfterUpdate(client, goal);\n      push({ type: 'success', title: 'Goal updated', body: `${goal.name} saved.` });\n    },\n    onSettled: (_data, _error, variables) => {\n      client.invalidateQueries({ queryKey: goalsKeys.detail(variables.id) });\n    }\n  });\n};\n\nexport const useDeleteGoal = () => {\n  const repo = useGoalsRepository();\n  const client = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => repo.remove(id),\n    onMutate: async id => {\n      await client.cancelQueries({ queryKey: goalsKeys.all });\n      const previous = client.getQueriesData<{ items: GoalRecord[]; total: number }>({ queryKey: goalsKeys.all });\n      updateCachesAfterDelete(client, id);\n      return { previous };\n    },\n    onError: (error, id, context) => {\n      if (context?.previous) {\n        context.previous.forEach(([key, data]) => {\n          client.setQueryData(key, data);\n        });\n      }\n      notifyError('Failed to delete goal', error);\n    },\n    onSuccess: (_data, id) => {\n      push({ type: 'success', title: 'Goal deleted', body: `Goal ${id} removed.` });\n    },\n    onSettled: () => {\n      client.invalidateQueries({ queryKey: goalsKeys.all });\n    }\n  });\n};\n\nexport const invalidateGoalsList = (client: QueryClient) => {\n  client.invalidateQueries({ queryKey: goalsKeys.all });\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/program/goals/csv/ImportDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/program/goals/csv/importJob.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/risk/api.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":60,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":60,"endColumn":60,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2125,2125],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2125,2125],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":85,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":85,"endColumn":77,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3069,3069],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3069,3069],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":110,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":110,"endColumn":60,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3900,3900],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3900,3900],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":116,"column":3,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":116,"endColumn":56,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4052,4052],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4052,4052],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport type { CreateRiskInput, RiskListQuery, RiskRecord, UpdateRiskInput } from '../../lib/repo/risk/types';\nimport { useRiskRepository, RepositoryError, normalizeError } from '../../lib/repo/index.tsx';\nimport { push } from '../../lib/notifications/store';\n\nexport const riskKeys = {\n  all: ['risk'] as const,\n  list: (params: RiskListQuery) =>\n    ['risk', params.q ?? '', (params.status ?? []).join(','), params.sort ?? '', params.order ?? 'asc', params.page ?? 0, params.pageSize ?? 10, (params.cols ?? []).join(',')] as const,\n  detail: (id: string) => ['risk', 'detail', id] as const\n};\n\nconst notifyError = (title: string, error: unknown) => {\n  const normalized = error instanceof RepositoryError ? error : normalizeError(error);\n  push({\n    type: 'error',\n    title,\n    body: normalized.message\n  });\n};\n\nexport const useRiskList = (params: RiskListQuery) => {\n  const repo = useRiskRepository();\n  return useQuery({\n    queryKey: riskKeys.list(params),\n    queryFn: () => repo.list(params),\n    keepPreviousData: true\n  });\n};\n\nexport const useRisk = (id: string | null) => {\n  const repo = useRiskRepository();\n  return useQuery({\n    queryKey: id ? riskKeys.detail(id) : ['risk', 'detail', 'none'],\n    queryFn: () => (id ? repo.get(id) : Promise.resolve(null)),\n    enabled: Boolean(id)\n  });\n};\n\nexport const useCreateRisk = () => {\n  const repo = useRiskRepository();\n  const client = useQueryClient();\n\n  return useMutation({\n    mutationFn: (input: CreateRiskInput) => repo.create(input),\n    onSuccess: record => {\n      const targets = client.getQueriesData<{ items: RiskRecord[]; total: number }>({ queryKey: riskKeys.all });\n      targets.forEach(([key, data]) => {\n        if (!data) return;\n        client.setQueryData(key, {\n          ...data,\n          items: [record, ...data.items],\n          total: data.total + 1\n        });\n      });\n      push({ type: 'success', title: 'Risk created', body: record.title });\n    },\n    onError: error => notifyError('Failed to create risk', error),\n    onSettled: () => {\n      client.invalidateQueries({ queryKey: riskKeys.all });\n    }\n  });\n};\n\nexport const useUpdateRisk = () => {\n  const repo = useRiskRepository();\n  const client = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, input }: { id: string; input: UpdateRiskInput }) => repo.update(id, input),\n    onSuccess: record => {\n      const targets = client.getQueriesData<{ items: RiskRecord[]; total: number }>({ queryKey: riskKeys.all });\n      targets.forEach(([key, data]) => {\n        if (!data) return;\n        client.setQueryData(key, {\n          ...data,\n          items: data.items.map(existing => (existing.id === record.id ? record : existing))\n        });\n      });\n      client.setQueryData(riskKeys.detail(record.id), record);\n      push({ type: 'success', title: 'Risk updated', body: record.title });\n    },\n    onError: error => notifyError('Failed to update risk', error),\n    onSettled: (_data, _error, variables) => {\n      client.invalidateQueries({ queryKey: riskKeys.detail(variables.id) });\n    }\n  });\n};\n\nexport const useDeleteRisk = () => {\n  const repo = useRiskRepository();\n  const client = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => repo.remove(id),\n    onSuccess: (_data, id) => {\n      const targets = client.getQueriesData<{ items: RiskRecord[]; total: number }>({ queryKey: riskKeys.all });\n      targets.forEach(([key, data]) => {\n        if (!data) return;\n        client.setQueryData(key, {\n          ...data,\n          items: data.items.filter(item => item.id !== id),\n          total: Math.max(0, data.total - 1)\n        });\n      });\n      push({ type: 'success', title: 'Risk deleted', body: id });\n    },\n    onError: error => notifyError('Failed to delete risk', error),\n    onSettled: () => {\n      client.invalidateQueries({ queryKey: riskKeys.all });\n    }\n  });\n};\n\nexport const invalidateRisks = (client: ReturnType<typeof useQueryClient>) => {\n  client.invalidateQueries({ queryKey: riskKeys.all });\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/system/settings/pages/SystemSettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/system/settings/panes/AppearancePane.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/system/settings/panes/LanguageRegionPane.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/features/system/settings/panes/PreferencesPane.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/layout/AdminLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/auth/session.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/auth/session.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/export/exportCsv.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/forms/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/i18n/__tests__/format.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/i18n/format.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/i18n/format.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/i18n/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/i18n/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/jobs/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/jobs/jobs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/jobs/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/network/offline.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":20,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":20,"endColumn":32,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[763,763],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[763,763],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":33,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":33,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1160,1160],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1160,1160],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { QueryClient } from '@tanstack/react-query';\nimport { push } from '../notifications/store';\nimport { translate } from '../i18n';\n\nlet initialized = false;\nlet lastStatus: 'online' | 'offline' = typeof navigator !== 'undefined' && navigator.onLine ? 'online' : 'offline';\n\nexport const setupNetworkListeners = (client: QueryClient) => {\n  if (initialized || typeof window === 'undefined') return;\n  initialized = true;\n\n  const handleOnline = () => {\n    lastStatus = 'online';\n    push({\n      type: 'success',\n      title: translate('network.online.title', { defaultValue: 'Back online' }),\n      body: translate('network.online.body', { defaultValue: 'Connection restored.' })\n    });\n    client.resumePausedMutations().catch(() => undefined);\n    client.invalidateQueries();\n  };\n\n  const handleOffline = () => {\n    if (lastStatus === 'offline') return;\n    lastStatus = 'offline';\n    push({\n      type: 'warning',\n      title: translate('network.offline.title', { defaultValue: 'You are offline' }),\n      body: translate('network.offline.body', {\n        defaultValue: 'Changes will sync once your connection is back.'\n      })\n    });\n    client.cancelQueries();\n  };\n\n  window.addEventListener('online', handleOnline);\n  window.addEventListener('offline', handleOffline);\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/notifications/store.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/notifications/store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/notifications/types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/notifications/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/query/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/query/keys.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/rbac/guard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/rbac/policy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/audit/http.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/audit/http.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/audit/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/audit/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/audit/memory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/audit/memory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/audit/types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/audit/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/compliance/memory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/compliance/memory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/compliance/types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/compliance/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/goals/types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/goals/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/http.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/memory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/memory.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"GoalsAdapter\" are only used as type.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":5,"endColumn":18,"fix":{"range":[0,24],"text":"import type {\n  GoalsAdapter} from './index';\nimport {"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  GoalsAdapter,\n  RepositoryError,\n  normalizeError\n} from './index';\nimport type {\n  CreateGoalInput,\n  GoalDynamicStatus,\n  GoalRecord,\n  GoalsListQuery,\n  GoalsListResult,\n  UpdateGoalInput\n} from './goals/types';\n\nconst INITIAL_DATA: GoalRecord[] = [\n  {\n    id: 'GL-001',\n    name: 'Fleet Compliance 2025',\n    owner: 'Eva Leitner',\n    dynamicStatus: 'ok',\n    audits: 8,\n    createdAt: '2024-01-10T09:21:00.000Z',\n    updatedAt: '2024-09-28T14:12:00.000Z',\n    lastAuditAt: '2024-09-01T11:00:00.000Z',\n    summary: 'Ensures the TAXIPartner fleet meets local compliance requirements ahead of the 2025 renewal.'\n  },\n  {\n    id: 'GL-002',\n    name: 'Driver Safety Refresh',\n    owner: 'Marco Huber',\n    dynamicStatus: 'warn',\n    audits: 5,\n    createdAt: '2023-11-04T08:05:00.000Z',\n    updatedAt: '2024-10-09T10:45:00.000Z',\n    lastAuditAt: '2024-09-15T08:30:00.000Z',\n    summary: 'Rework driver safety certifications and extend blended learning sessions to night shift staff.'\n  },\n  {\n    id: 'GL-003',\n    name: 'Multi-Tenant Billing',\n    owner: 'Nina Schmidt',\n    dynamicStatus: 'ok',\n    audits: 3,\n    createdAt: '2024-03-16T16:24:00.000Z',\n    updatedAt: '2024-10-01T13:05:00.000Z',\n    lastAuditAt: '2024-08-19T14:00:00.000Z',\n    summary: 'Enable billing segmentation for multimodal partners without increasing operational overhead.'\n  },\n  {\n    id: 'GL-004',\n    name: 'Mandate Renewal Campaign',\n    owner: 'Samuel Ãz',\n    dynamicStatus: 'risk',\n    audits: 2,\n    createdAt: '2023-07-22T10:17:00.000Z',\n    updatedAt: '2024-09-26T07:48:00.000Z',\n    lastAuditAt: '2024-07-29T09:15:00.000Z',\n    summary: 'Coordinate outreach to city partners and unions to renew service mandates before year end.'\n  },\n  {\n    id: 'GL-005',\n    name: 'Incident Response Readiness',\n    owner: 'Lena Berger',\n    dynamicStatus: 'warn',\n    audits: 7,\n    createdAt: '2024-02-02T07:12:00.000Z',\n    updatedAt: '2024-10-07T17:32:00.000Z',\n    lastAuditAt: '2024-09-30T09:45:00.000Z',\n    summary: 'Increase SecOps drill coverage and reduce average containment time for fleet-wide incidents.'\n  },\n  {\n    id: 'GL-006',\n    name: 'Zero Emission Fleet',\n    owner: 'Oliver Brandt',\n    dynamicStatus: 'ok',\n    audits: 6,\n    createdAt: '2022-12-11T08:41:00.000Z',\n    updatedAt: '2024-09-19T15:22:00.000Z',\n    lastAuditAt: '2024-08-02T10:10:00.000Z',\n    summary: 'Phase-in EV adoption and supporting infrastructure across high-traffic partner hubs.'\n  },\n  {\n    id: 'GL-007',\n    name: 'Night Shift Safety',\n    owner: 'Melanie Gruber',\n    dynamicStatus: 'risk',\n    audits: 4,\n    createdAt: '2023-09-08T18:05:00.000Z',\n    updatedAt: '2024-10-06T21:12:00.000Z',\n    lastAuditAt: '2024-09-18T22:00:00.000Z',\n    summary: 'Deploy improved panic alert flows and refresh on-prem security coverage for off-peak operations.'\n  }\n];\n\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst matchesSearch = (goal: GoalRecord, term: string) => {\n  const search = term.trim().toLowerCase();\n  if (!search.length) return true;\n  return (\n    goal.name.toLowerCase().includes(search) ||\n    goal.owner.toLowerCase().includes(search) ||\n    goal.id.toLowerCase().includes(search) ||\n    (goal.summary ?? '').toLowerCase().includes(search)\n  );\n};\n\nconst matchesStatus = (goal: GoalRecord, statuses?: GoalDynamicStatus[]) => {\n  if (!statuses || statuses.length === 0) return true;\n  return statuses.includes(goal.dynamicStatus);\n};\n\nconst sortGoals = (goals: GoalRecord[], field?: string, order: 'asc' | 'desc' = 'asc') => {\n  if (!field) {\n    return goals;\n  }\n  const sorted = [...goals];\n  sorted.sort((a, b) => {\n    const av = (a as Record<string, unknown>)[field];\n    const bv = (b as Record<string, unknown>)[field];\n\n    if (typeof av === 'number' && typeof bv === 'number') {\n      return order === 'asc' ? av - bv : bv - av;\n    }\n\n    const as = String(av ?? '');\n    const bs = String(bv ?? '');\n    return order === 'asc' ? as.localeCompare(bs) : bs.localeCompare(as);\n  });\n\n  return sorted;\n};\n\nconst paginate = (goals: GoalRecord[], page = 0, pageSize = goals.length) => {\n  if (pageSize <= 0) return goals;\n  const start = page * pageSize;\n  return goals.slice(start, start + pageSize);\n};\n\nconst createIdFactory = () => {\n  let counter = INITIAL_DATA.length + 1;\n  return () => `GL-${String(counter++).padStart(3, '0')}`;\n};\n\nconst idFactory = createIdFactory();\n\nexport const createMemoryGoalsAdapter = (): GoalsAdapter => {\n  let items: GoalRecord[] = [...INITIAL_DATA];\n\n  const list: GoalsAdapter['list'] = async (query: GoalsListQuery): Promise<GoalsListResult> => {\n    await delay(120);\n    const filtered = items.filter(goal => matchesSearch(goal, query.search ?? '') && matchesStatus(goal, query.status));\n    const sorted = sortGoals(filtered, query.sort, query.order);\n    const paginated = paginate(sorted, query.page, query.pageSize);\n    return {\n      items: paginated.map(goal => ({ ...goal })),\n      total: filtered.length\n    };\n  };\n\n  const get: GoalsAdapter['get'] = async (id: string) => {\n    await delay(80);\n    const goal = items.find(item => item.id === id);\n    return goal ? { ...goal } : null;\n  };\n\n  const create: GoalsAdapter['create'] = async (input: CreateGoalInput) => {\n    await delay(150);\n    if (!input.name.trim() || !input.owner.trim()) {\n      throw new RepositoryError('Goal name and owner are required.', { statusCode: 400 });\n    }\n    const timestamp = new Date().toISOString();\n    const goal: GoalRecord = {\n      id: idFactory(),\n      name: input.name.trim(),\n      owner: input.owner.trim(),\n      dynamicStatus: input.dynamicStatus,\n      audits: input.audits,\n      summary: input.summary ?? '',\n      createdAt: timestamp,\n      updatedAt: timestamp,\n      lastAuditAt: timestamp\n    };\n    items = [goal, ...items];\n    return { ...goal };\n  };\n\n  const update: GoalsAdapter['update'] = async (id: string, input: UpdateGoalInput) => {\n    await delay(140);\n    const index = items.findIndex(goal => goal.id === id);\n    if (index === -1) {\n      throw new RepositoryError('Goal not found', { statusCode: 404 });\n    }\n    const previous = items[index];\n    const updated: GoalRecord = {\n      ...previous,\n      ...input,\n      name: input.name !== undefined ? input.name.trim() : previous.name,\n      owner: input.owner !== undefined ? input.owner.trim() : previous.owner,\n      audits: input.audits ?? previous.audits,\n      dynamicStatus: input.dynamicStatus ?? previous.dynamicStatus,\n      summary: input.summary ?? previous.summary,\n      updatedAt: new Date().toISOString()\n    };\n    items = items.map(goal => (goal.id === id ? updated : goal));\n    return { ...updated };\n  };\n\n  const remove: GoalsAdapter['remove'] = async (id: string) => {\n    await delay(120);\n    const exists = items.some(goal => goal.id === id);\n    if (!exists) {\n      throw new RepositoryError('Goal not found', { statusCode: 404 });\n    }\n    items = items.filter(goal => goal.id !== id);\n  };\n\n  return {\n    list: async query => {\n      try {\n        return await list(query);\n      } catch (error) {\n        throw normalizeError(error);\n      }\n    },\n    get: async id => {\n      try {\n        return await get(id);\n      } catch (error) {\n        throw normalizeError(error);\n      }\n    },\n    create: async input => {\n      try {\n        return await create(input);\n      } catch (error) {\n        throw normalizeError(error);\n      }\n    },\n    update: async (id, input) => {\n      try {\n        return await update(id, input);\n      } catch (error) {\n        throw normalizeError(error);\n      }\n    },\n    remove: async id => {\n      try {\n        await remove(id);\n      } catch (error) {\n        throw normalizeError(error);\n      }\n    }\n  };\n};\n\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/risk/memory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/risk/memory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/risk/types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/risk/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/settings.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/repo/settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/settings/__tests__/store.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/settings/store.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/settings/store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/settings/types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/settings/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/tenant/store.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/tenant/store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/views/presets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/lib/ws/mockSocket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/AnalyticsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/ApprovalsPage.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"FormEvent\" are only used as type.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":1,"endColumn":85,"fix":{"range":[0,26],"text":"import type { FormEvent} from 'react';\nimport React, {"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { FormEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { CheckCircle2, Loader2, ShieldAlert, ShieldCheck } from 'lucide-react';\nimport RequirePermission from '../components/rbac/RequirePermission';\nimport { useGuardContext } from '../lib/rbac/guard';\nimport { listApprovals, startApproval, applyApproval } from '../../frontend/users/api.ts';\n\ntype ApprovalRecord = {\n  id: string;\n  op: string;\n  tenantId?: string;\n  targetId?: string;\n  status?: 'PENDING' | 'APPROVED' | 'REJECTED' | 'CANCELLED';\n  initiatorUserId?: string;\n  approvals?: Array<{ userId: string }>;\n};\n\nconst statusBadgeStyles: Record<string, string> = {\n  PENDING: 'bg-amber-100 text-amber-700 dark:bg-amber-500/20 dark:text-amber-200',\n  APPROVED: 'bg-emerald-100 text-emerald-700 dark:bg-emerald-500/20 dark:text-emerald-200',\n  REJECTED: 'bg-rose-100 text-rose-700 dark:bg-rose-500/20 dark:text-rose-200',\n  CANCELLED: 'bg-slate-200 text-slate-600 dark:bg-slate-700 dark:text-slate-200'\n};\n\nconst ApprovalsContent: React.FC = () => {\n  const { user } = useGuardContext();\n  const [records, setRecords] = useState<ApprovalRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [formState, setFormState] = useState({ op: '', tenantId: '', targetId: '' });\n  const [submitting, setSubmitting] = useState(false);\n\n  const refresh = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = (await listApprovals()) as ApprovalRecord[];\n      setRecords(Array.isArray(data) ? data : []);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Onay listesi yÃ¼klenemedi.';\n      setError(message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    void refresh();\n  }, [refresh]);\n\n  const handleSubmit = async (event: FormEvent) => {\n    event.preventDefault();\n    if (!formState.op.trim()) {\n      setError('Operasyon anahtarÄ± gerekli.');\n      return;\n    }\n    if (!formState.tenantId.trim()) {\n      setError('Tenant ID gerekli.');\n      return;\n    }\n    setSubmitting(true);\n    setError(null);\n    try {\n      await startApproval(formState.op.trim(), formState.tenantId.trim(), user.id, formState.targetId.trim() || undefined);\n      setFormState({ op: '', tenantId: formState.tenantId, targetId: '' });\n      await refresh();\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Onay baÅlatÄ±lÄ±rken hata oluÅtu.';\n      setError(message);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const grouped = useMemo(() => {\n    const pending = records.filter(record => record.status === 'PENDING');\n    const resolved = records.filter(record => record.status !== 'PENDING');\n    return { pending, resolved };\n  }, [records]);\n\n  const approve = async (approvalId: string) => {\n    try {\n      await applyApproval(approvalId, user.id);\n      await refresh();\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Onay uygulanamadÄ±.';\n      setError(message);\n    }\n  };\n\n  return (\n    <section className=\"flex flex-1 flex-col gap-5\">\n      <header className=\"space-y-2\">\n        <h1 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100\">Four-eyes approvals</h1>\n        <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n          Tenant bazlÄ± iki aÅamalÄ± iÅlemler iÃ§in approval kuyruÄu. Legacy IAM modÃ¼lÃ¼nden taÅÄ±ndÄ±.\n        </p>\n      </header>\n\n      <form onSubmit={handleSubmit} className=\"rounded-2xl border border-slate-200 bg-white p-4 shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n        <h2 className=\"text-sm font-semibold text-slate-600 dark:text-slate-200\">Yeni onay oluÅtur</h2>\n        <div className=\"mt-3 grid gap-3 md:grid-cols-3\">\n          <div className=\"space-y-1\">\n            <label className=\"text-xs font-medium text-slate-500 dark:text-slate-400\">Operasyon anahtarÄ±</label>\n            <input\n              value={formState.op}\n              onChange={event => setFormState(prev => ({ ...prev, op: event.target.value }))}\n              placeholder=\"Ã¶r. vehicle.decommission\"\n              className=\"w-full rounded-lg border border-slate-200 px-3 py-2 text-sm shadow-inner focus:border-slate-500 focus:outline-none dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200\"\n              required\n            />\n          </div>\n          <div className=\"space-y-1\">\n            <label className=\"text-xs font-medium text-slate-500 dark:text-slate-400\">Tenant ID</label>\n            <input\n              value={formState.tenantId}\n              onChange={event => setFormState(prev => ({ ...prev, tenantId: event.target.value }))}\n              placeholder=\"Ã¶rn. tenant-vienna\"\n              className=\"w-full rounded-lg border border-slate-200 px-3 py-2 text-sm shadow-inner focus:border-slate-500 focus:outline-none dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200\"\n              required\n            />\n          </div>\n          <div className=\"space-y-1\">\n            <label className=\"text-xs font-medium text-slate-500 dark:text-slate-400\">Target ID (opsiyonel)</label>\n            <input\n              value={formState.targetId}\n              onChange={event => setFormState(prev => ({ ...prev, targetId: event.target.value }))}\n              placeholder=\"Ã¶r. VEH-9123\"\n              className=\"w-full rounded-lg border border-slate-200 px-3 py-2 text-sm shadow-inner focus:border-slate-500 focus:outline-none dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200\"\n            />\n          </div>\n        </div>\n        <div className=\"mt-4 flex flex-wrap items-center gap-3\">\n          <button\n            type=\"submit\"\n            disabled={submitting}\n            className=\"inline-flex items-center gap-2 rounded-lg bg-slate-900 px-4 py-2 text-sm font-medium text-white shadow-sm transition hover:bg-slate-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:opacity-60 dark:bg-slate-100 dark:text-slate-900 dark:hover:bg-slate-200\"\n          >\n            {submitting ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <ShieldCheck className=\"h-4 w-4\" />}\n            Onay baÅlat\n          </button>\n          <span className=\"text-xs text-slate-500 dark:text-slate-400\">Ä°Ålem sahibi: {user.id}</span>\n        </div>\n      </form>\n\n      {error ? (\n        <div className=\"rounded-2xl border border-rose-200 bg-rose-50 p-4 text-sm text-rose-700 dark:border-rose-500/40 dark:bg-rose-500/15 dark:text-rose-200\">\n          {error}\n        </div>\n      ) : null}\n\n      <section className=\"grid gap-4 lg:grid-cols-2\">\n        <ApprovalList\n          title=\"Bekleyen onaylar\"\n          subtitle=\"AÅaÄÄ±daki iÅlemler ikinci gÃ¶z onayÄ± bekliyor.\"\n          emptyText=\"Bekleyen kayÄ±t yok.\"\n          loading={loading}\n          approvals={grouped.pending}\n          onApprove={approve}\n        />\n        <ApprovalList\n          title=\"Tamamlanan / iptal edilen\"\n          subtitle=\"GeÃ§miÅ onay hareketleri.\"\n          emptyText=\"GeÃ§miÅ kayÄ±t yok.\"\n          loading={loading}\n          approvals={grouped.resolved}\n        />\n      </section>\n    </section>\n  );\n};\n\ntype ApprovalListProps = {\n  title: string;\n  subtitle: string;\n  emptyText: string;\n  approvals: ApprovalRecord[];\n  loading: boolean;\n  onApprove?: (id: string) => void;\n};\n\nconst ApprovalList: React.FC<ApprovalListProps> = ({ title, subtitle, approvals, emptyText, loading, onApprove }) => (\n  <article className=\"rounded-2xl border border-slate-200 bg-white p-4 shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n    <h2 className=\"text-sm font-semibold text-slate-600 dark:text-slate-200\">{title}</h2>\n    <p className=\"text-xs text-slate-500 dark:text-slate-400\">{subtitle}</p>\n    <div className=\"mt-3 space-y-3\">\n      {loading ? (\n        <div className=\"flex items-center gap-2 text-sm text-slate-500 dark:text-slate-300\">\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n          YÃ¼kleniyorâ¦\n        </div>\n      ) : approvals.length === 0 ? (\n        <div className=\"rounded-lg border border-dashed border-slate-200 p-4 text-xs text-slate-500 dark:border-slate-700 dark:text-slate-400\">\n          {emptyText}\n        </div>\n      ) : (\n        approvals.map(record => (\n          <div key={record.id} className=\"rounded-xl border border-slate-200 p-3 shadow-sm dark:border-slate-700\">\n            <div className=\"flex flex-wrap items-center justify-between gap-2\">\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-semibold text-slate-700 dark:text-slate-100\">{record.op}</p>\n                <p className=\"text-xs text-slate-500 dark:text-slate-400\">Tenant: {record.tenantId ?? 'â'}</p>\n                {record.targetId ? (\n                  <p className=\"text-xs text-slate-500 dark:text-slate-400\">Target: {record.targetId}</p>\n                ) : null}\n                <p className=\"text-xs text-slate-500 dark:text-slate-400\">BaÅlatan: {record.initiatorUserId ?? 'â'}</p>\n              </div>\n              <span className={`inline-flex items-center gap-1 rounded-full px-2.5 py-1 text-xs font-semibold ${statusBadgeStyles[record.status ?? 'PENDING'] ?? 'bg-slate-200 text-slate-600 dark:bg-slate-700 dark:text-slate-200'}`}>\n                {record.status === 'APPROVED' ? <CheckCircle2 className=\"h-3.5 w-3.5\" /> : <ShieldAlert className=\"h-3.5 w-3.5\" />}\n                {record.status ?? 'PENDING'}\n              </span>\n            </div>\n            <p className=\"mt-2 text-xs text-slate-500 dark:text-slate-400\">\n              Onaylayanlar: {(record.approvals ?? []).map(item => item.userId).join(', ') || 'â'}\n            </p>\n            {record.status === 'PENDING' && onApprove ? (\n              <button\n                type=\"button\"\n                onClick={() => onApprove(record.id)}\n                className=\"mt-3 inline-flex items-center gap-2 rounded-lg bg-emerald-600 px-3 py-1.5 text-xs font-semibold text-white shadow-sm transition hover:bg-emerald-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-emerald-400\"\n              >\n                Onayla\n              </button>\n            ) : null}\n          </div>\n        ))\n      )}\n    </div>\n  </article>\n);\n\nconst ApprovalsPage: React.FC = () => (\n  <RequirePermission permission=\"iam.users.read\">\n    <ApprovalsContent />\n  </RequirePermission>\n);\n\nexport default ApprovalsPage;\n\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/AssetsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/AuditListPage.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"ColumnDef\", \"SortingState\" and \"VisibilityState\" are only used as type.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":8,"endColumn":32,"fix":{"range":[61,117],"text":"import type {\n  ColumnDef,\n  SortingState,\n  VisibilityState} from '@tanstack/react-table';\nimport {"}},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":93,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":93,"endColumn":57,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2772,2772],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2772,2772],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useEffect, useMemo, useState } from 'react';\nimport {\n  ColumnDef,\n  SortingState,\n  VisibilityState,\n  getCoreRowModel,\n  useReactTable\n} from '@tanstack/react-table';\nimport { ArrowRight, Download, Filter, RefreshCw, Search } from 'lucide-react';\nimport QueryErrorBoundary from '../components/errors/QueryErrorBoundary';\nimport VirtualTable from '../components/table/VirtualTable';\nimport ViewsMenu from '../components/views/ViewsMenu';\nimport { useAuditList, useAuditEvent } from '../features/audit/api';\nimport type { AuditEvent, AuditListQuery } from '../lib/repo/audit';\nimport useQuerySync from '../hooks/useQuerySync';\nimport AuditDetailModal from '../components/AuditDetailModal';\nimport { startCsvExport } from '../lib/export/exportCsv';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { subscribeAuditStream } from '../lib/ws/mockSocket';\nimport { useTranslation, useLocale } from '../lib/i18n';\nimport { useToast } from '../components/feedback/ToastProvider';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\n\nconst ACTION_OPTIONS = [\n  'program.goal.created',\n  'program.goal.updated',\n  'risk.record.updated',\n  'jobs.csv.completed',\n  'auth.session.login',\n  'rbac.permission.denied'\n];\n\nconst USERS = [\n  { id: 'user-demo', name: 'Admin Demo' },\n  { id: 'user-lisa', name: 'Lisa Graf' },\n  { id: 'user-marco', name: 'Marco Huber' },\n  { id: 'user-eva', name: 'Eva Leitner' }\n];\n\nconst QueryDefaults = {\n  q: '',\n  user: '',\n  action: '',\n  from: '',\n  to: '',\n  page: 0,\n  pageSize: 25,\n  sort: 'ts',\n  order: 'desc'\n} satisfies AuditListQuery & {\n  page: number;\n  pageSize: number;\n  sort: 'ts' | 'action';\n  order: 'asc' | 'desc';\n};\n\ntype QueryState = typeof QueryDefaults;\n\nconst AuditListContent: React.FC = () => {\n  const client = useQueryClient();\n  const { t } = useTranslation();\n  const locale = useLocale();\n  const { showToast } = useToast();\n  const locationRouter = useLocation();\n  const navigate = useNavigate();\n  const params = useParams<{ auditId?: string }>();\n  const [query, setQuery] = useQuerySync<QueryState>({\n    defaults: QueryDefaults,\n    schema: {\n      q: 'string',\n      user: 'string',\n      action: 'string',\n      from: 'string',\n      to: 'string',\n      page: 'number',\n      pageSize: 'number',\n      sort: 'string',\n      order: 'string'\n    }\n  });\n  const [sorting, setSorting] = useState<SortingState>([\n    { id: 'ts', desc: true }\n  ]);\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\n  const [selectedId, setSelectedId] = useState<string | null>(null);\n\n  useEffect(() => {\n    setSelectedId(params.auditId ?? null);\n  }, [params.auditId]);\n\n  useEffect(() => {\n    const unsubscribe = subscribeAuditStream(() => {\n      client.invalidateQueries({ queryKey: ['audit'] });\n    });\n    return () => unsubscribe();\n  }, [client]);\n\n  const listQuery: AuditListQuery = useMemo(\n    () => ({\n      q: query.q,\n      user: query.user || undefined,\n      action: query.action || undefined,\n      from: query.from || undefined,\n      to: query.to || undefined,\n      page: query.page,\n      pageSize: query.pageSize,\n      sort: (query.sort as 'ts' | 'action') ?? 'ts',\n      order: (query.order as 'asc' | 'desc') ?? 'desc'\n    }),\n    [query]\n  );\n\n  const list = useAuditList(listQuery);\n  const detail = useAuditEvent(selectedId);\n\n  const columns = useMemo<ColumnDef<AuditEvent>[]>(\n    () => [\n      {\n        accessorKey: 'ts',\n        header: () => t('audit.table.timestamp', { defaultValue: 'Time' }),\n        cell: info =>\n          new Intl.DateTimeFormat(locale.locale, {\n            dateStyle: 'short',\n            timeStyle: 'medium'\n          }).format(new Date(info.getValue<string>())),\n        enableSorting: true\n      },\n      {\n        accessorKey: 'summary',\n        header: () => t('audit.table.summary', { defaultValue: 'Summary' }),\n        cell: info => (\n          <button\n            type=\"button\"\n            onClick={() => navigate(`/audit/${info.row.original.id}${locationRouter.search}`)}\n            className=\"text-left text-slate-900 underline-offset-2 hover:underline dark:text-slate-100\"\n          >\n            {info.getValue<string>()}\n          </button>\n        )\n      },\n      {\n        accessorKey: 'action',\n        header: () => t('audit.table.action', { defaultValue: 'Action' }),\n        cell: info => <span className=\"text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400\">{info.getValue<string>()}</span>,\n        enableSorting: true\n      },\n      {\n        accessorKey: 'actor',\n        header: () => t('audit.table.actor', { defaultValue: 'Actor' }),\n        cell: info => info.row.original.actor.name\n      },\n      {\n        accessorKey: 'target',\n        header: () => t('audit.table.target', { defaultValue: 'Target' }),\n        cell: info => info.row.original.target.name ?? info.row.original.target.id\n      },\n      {\n        accessorKey: 'source',\n        header: () => t('audit.table.source', { defaultValue: 'Source' }),\n        cell: info => info.getValue<string>() ?? 'ui'\n      }\n    ],\n    [locale.locale, t]\n  );\n\n  const table = useReactTable({\n    data: list.data?.items ?? [],\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      pagination: {\n        pageIndex: query.page,\n        pageSize: query.pageSize\n      }\n    },\n    manualPagination: true,\n    manualSorting: true,\n    getCoreRowModel: getCoreRowModel(),\n    pageCount: Math.max(1, Math.ceil((list.data?.total ?? 0) / Math.max(1, query.pageSize))),\n    onSortingChange: updater => {\n      setSorting(prev => {\n        const next = typeof updater === 'function' ? updater(prev) : updater;\n        if (next.length === 0) {\n          setQuery({ sort: 'ts', order: 'desc' });\n          return next;\n        }\n        const [first] = next;\n        setQuery({ sort: first.id, order: first.desc ? 'desc' : 'asc', page: 0 });\n        return next;\n      });\n    },\n    onPaginationChange: updater => {\n      const next = typeof updater === 'function' ? updater({ pageIndex: query.page, pageSize: query.pageSize }) : updater;\n      if (next.pageSize !== query.pageSize) {\n        setQuery({ pageSize: next.pageSize, page: 0 });\n      } else if (next.pageIndex !== query.page) {\n        setQuery({ page: next.pageIndex });\n      }\n    },\n    onColumnVisibilityChange: updater => {\n      setColumnVisibility(updater);\n    }\n  });\n\n  const handleExport = () => {\n    const currentRows = table.getRowModel().rows.map(row => row.original as AuditEvent);\n    if (!currentRows.length) {\n      showToast({ title: t('audit.export.empty', { defaultValue: 'Nothing to export' }), tone: 'info' });\n      return;\n    }\n\n    const visibleColumns = table\n      .getAllLeafColumns()\n      .filter(column => column.getIsVisible())\n      .map(column => column.id);\n\n    const columnMap = {\n      ts: {\n        id: 'ts',\n        header: t('audit.table.timestamp', { defaultValue: 'Time' }),\n        accessor: (row: AuditEvent) => row.ts\n      },\n      summary: {\n        id: 'summary',\n        header: t('audit.table.summary', { defaultValue: 'Summary' }),\n        accessor: (row: AuditEvent) => row.summary\n      },\n      actor: {\n        id: 'actor',\n        header: t('audit.table.actor', { defaultValue: 'Actor' }),\n        accessor: (row: AuditEvent) => row.actor.name\n      },\n      action: {\n        id: 'action',\n        header: t('audit.table.action', { defaultValue: 'Action' }),\n        accessor: (row: AuditEvent) => row.action\n      },\n      target: {\n        id: 'target',\n        header: t('audit.table.target', { defaultValue: 'Target' }),\n        accessor: (row: AuditEvent) => row.target.name ?? row.target.id\n      },\n      source: {\n        id: 'source',\n        header: t('audit.table.source', { defaultValue: 'Source' }),\n        accessor: (row: AuditEvent) => row.source ?? 'ui'\n      }\n    } satisfies Record<string, { id: string; header: string; accessor: (row: AuditEvent) => unknown }>;\n\n    const exportColumns = visibleColumns\n      .map(columnId => columnMap[columnId as keyof typeof columnMap])\n      .filter((column): column is (typeof columnMap)[keyof typeof columnMap] => Boolean(column));\n\n    if (!exportColumns.length) {\n      showToast({ title: t('audit.export.empty', { defaultValue: 'Nothing to export' }), tone: 'info' });\n      return;\n    }\n\n    startCsvExport<AuditEvent>({\n      module: 'audit-events',\n      filename: 'audit-events.csv',\n      rows: currentRows,\n      totalCount: list.data?.total ?? currentRows.length,\n      query: { ...listQuery, visibleColumns },\n      columns: exportColumns\n    });\n  };\n\n  return (\n    <section className=\"flex flex-1 flex-col gap-5\">\n      <header className=\"flex flex-wrap items-start justify-between gap-3\">\n        <div>\n          <h1 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100\">{t('audit.title', { defaultValue: 'Audit center' })}</h1>\n          <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n            {t('audit.description', { defaultValue: 'Monitor key events, access changes and exportable logs in real-time.' })}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <button\n            type=\"button\"\n            onClick={handleExport}\n            className=\"inline-flex items-center gap-2 rounded-xl border border-slate-200 bg-white px-3 py-2 text-sm font-medium text-slate-600 shadow-sm transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            <Download className=\"h-4 w-4\" aria-hidden=\"true\" />\n            {t('audit.actions.export', { defaultValue: 'Export CSV' })}\n          </button>\n          <ViewsMenu currentQuery={query} onApply={params => setQuery({ ...params })} />\n        </div>\n      </header>\n\n      <div className=\"grid gap-3 rounded-2xl border border-slate-200 bg-white p-4 shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n        <div className=\"flex flex-wrap gap-3\">\n          <div className=\"relative flex-1 min-w-[220px]\">\n            <Search className=\"pointer-events-none absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-slate-400\" />\n            <input\n              type=\"search\"\n              value={query.q}\n              onChange={event => setQuery({ q: event.target.value, page: 0 })}\n              placeholder={t('audit.filters.search', { defaultValue: 'Search eventsâ¦' })}\n              className=\"w-full rounded-xl border border-slate-200 bg-white py-2 pl-10 pr-3 text-sm text-slate-700 shadow-inner focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200 dark:focus:border-slate-400\"\n            />\n          </div>\n          <div className=\"flex flex-col gap-1 text-xs text-slate-500 dark:text-slate-400\">\n            <label htmlFor=\"audit-user\">{t('audit.filters.user', { defaultValue: 'Actor' })}</label>\n            <select\n              id=\"audit-user\"\n              value={query.user}\n              onChange={event => setQuery({ user: event.target.value, page: 0 })}\n              className=\"rounded-xl border border-slate-200 bg-white px-3 py-2 text-sm text-slate-700 shadow-inner focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200 dark:focus:border-slate-400\"\n            >\n              <option value=\"\">{t('audit.filters.user.all', { defaultValue: 'All actors' })}</option>\n              {USERS.map(user => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"flex flex-col gap-1 text-xs text-slate-500 dark:text-slate-400\">\n            <label htmlFor=\"audit-action\">{t('audit.filters.action', { defaultValue: 'Action' })}</label>\n            <select\n              id=\"audit-action\"\n              value={query.action}\n              onChange={event => setQuery({ action: event.target.value, page: 0 })}\n              className=\"rounded-xl border border-slate-200 bg-white px-3 py-2 text-sm text-slate-700 shadow-inner focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200 dark:focus:border-slate-400\"\n            >\n              <option value=\"\">{t('audit.filters.action.all', { defaultValue: 'All actions' })}</option>\n              {ACTION_OPTIONS.map(action => (\n                <option key={action} value={action}>\n                  {action}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"flex flex-col gap-1 text-xs text-slate-500 dark:text-slate-400\">\n            <label htmlFor=\"audit-from\">{t('audit.filters.from', { defaultValue: 'From' })}</label>\n            <input\n              id=\"audit-from\"\n              type=\"date\"\n              value={query.from}\n              onChange={event => setQuery({ from: event.target.value, page: 0 })}\n              className=\"rounded-xl border border-slate-200 bg-white px-3 py-2 text-sm text-slate-700 shadow-inner focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200 dark:focus:border-slate-400\"\n            />\n          </div>\n          <div className=\"flex flex-col gap-1 text-xs text-slate-500 dark:text-slate-400\">\n            <label htmlFor=\"audit-to\">{t('audit.filters.to', { defaultValue: 'To' })}</label>\n            <input\n              id=\"audit-to\"\n              type=\"date\"\n              value={query.to}\n              onChange={event => setQuery({ to: event.target.value, page: 0 })}\n              className=\"rounded-xl border border-slate-200 bg-white px-3 py-2 text-sm text-slate-700 shadow-inner focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200 dark:focus:border-slate-400\"\n            />\n          </div>\n          <button\n            type=\"button\"\n            onClick={() => setQuery({ q: '', user: '', action: '', from: '', to: '', page: 0 })}\n            className=\"inline-flex items-center gap-2 rounded-xl border border-slate-200 bg-white px-3 py-2 text-sm font-medium text-slate-600 shadow-sm transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            {t('audit.filters.reset', { defaultValue: 'Reset filters' })}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"relative\" style={{ contain: 'paint', willChange: 'transform' }}>\n        {list.isFetching ? (\n          <div className=\"pointer-events-none absolute right-4 top-4 z-10 inline-flex items-center gap-2 rounded-full bg-slate-900/5 px-3 py-1 text-xs font-medium text-slate-600 dark:bg-slate-100/10 dark:text-slate-300\">\n            <RefreshCw className=\"h-3.5 w-3.5 animate-spin\" aria-hidden=\"true\" />\n            {t('audit.refreshing', { defaultValue: 'Refreshingâ¦' })}\n          </div>\n        ) : null}\n        <VirtualTable\n          table={table}\n          height={520}\n          virtualizationThreshold={400}\n          isLoading={list.isLoading}\n          emptyMessage={t('audit.empty', { defaultValue: 'No audit events match your filters.' })}\n        />\n      </div>\n\n      <div className=\"flex flex-wrap items-center justify-between gap-3 rounded-2xl border border-slate-200 bg-white px-4 py-3 text-xs text-slate-500 shadow-sm dark:border-slate-800 dark:bg-slate-900 dark:text-slate-300\">\n        <div>\n          {t('audit.pagination.summary', {\n            defaultValue: 'Showing page {{page}} of {{pages}} Â· {{total}} events',\n            values: {\n              page: query.page + 1,\n              pages: Math.max(1, Math.ceil((list.data?.total ?? 0) / Math.max(1, query.pageSize))),\n              total: list.data?.total ?? 0\n            }\n          })}\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <button\n            type=\"button\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n            className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            <ArrowRight className=\"h-4 w-4 rotate-180\" aria-hidden=\"true\" />\n            {t('audit.pagination.prev', { defaultValue: 'Prev' })}\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n            className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            {t('audit.pagination.next', { defaultValue: 'Next' })}\n            <ArrowRight className=\"h-4 w-4\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </div>\n\n      <AuditDetailModal\n        event={detail.data ?? null}\n        isOpen={Boolean(selectedId)}\n        onClose={() => navigate({ pathname: '/audit', search: locationRouter.search }, { replace: true })}\n      />\n    </section>\n  );\n};\n\nconst AuditListPage: React.FC = () => (\n  <QueryErrorBoundary>\n    <AuditListContent />\n  </QueryErrorBoundary>\n);\n\nexport default AuditListPage;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/AuditLogsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/CompaniesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/ControlsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/DashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/LibraryPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/MandatesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/OUsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/OrganizationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/PermissionsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/PlaceholderPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/ProgramAuditsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/ProgramGoalsPage.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"ColumnDef\", \"SortingState\", \"VisibilityState\" and \"RowSelectionState\" are only used as type.","line":3,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":14,"endColumn":32,"fix":{"range":[125,319],"text":"import type {\n  ColumnDef,\n  SortingState,\n  VisibilityState,\n  RowSelectionState\n} from '@tanstack/react-table';\nimport {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n  createColumnHelper"}},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"All imports in the declaration are only used as types. Use `import type`.","line":32,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":32,"endColumn":73,"fix":{"range":[887,887],"text":" type"}},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"All imports in the declaration are only used as types. Use `import type`.","line":34,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":34,"endColumn":58,"fix":{"range":[1036,1036],"text":" type"}},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"GoalsImportPayload\" are only used as type.","line":36,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":36,"endColumn":96,"fix":{"range":[1159,1204],"text":"import type { GoalsImportPayload } from '../features/program/goals/csv/importJob';\nimport { startGoalsImport"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport {\n  ColumnDef,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n  createColumnHelper,\n  RowSelectionState\n} from '@tanstack/react-table';\nimport {\n  Columns3,\n  Download,\n  EllipsisVertical,\n  Filter,\n  ListChecks,\n  Loader2,\n  PlusCircle,\n  Search\n} from 'lucide-react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport useQuerySync from '../hooks/useQuerySync';\nimport storage from '../utils/storage';\nimport { useToast } from '../components/feedback/ToastProvider';\nimport Modal from '../components/overlay/Modal';\nimport ConfirmDialog from '../components/overlay/ConfirmDialog';\nimport GoalForm from '../features/program/goals/GoalForm';\nimport { GoalDynamicStatus, GoalRecord } from '../lib/repo/goals/types';\nimport { useGoalsRepository, normalizeError } from '../lib/repo/index.tsx';\nimport { GoalFormValues } from '../lib/forms/validation';\nimport ImportDialog from '../features/program/goals/csv/ImportDialog';\nimport { startGoalsImport, GoalsImportPayload } from '../features/program/goals/csv/importJob';\nimport { push as pushNotice } from '../lib/notifications/store';\nimport { Guard } from '../lib/rbac/guard';\nimport QueryErrorBoundary from '../components/errors/QueryErrorBoundary';\nimport ViewsMenu from '../components/views/ViewsMenu';\nimport { startCsvExport } from '../lib/export/exportCsv';\nimport {\n  useGoalsList,\n  useGoal,\n  useCreateGoal,\n  useUpdateGoal,\n  useDeleteGoal,\n  invalidateGoalsList\n} from '../features/program/goals/api';\n\nconst STORAGE_KEY = 'tp-admin@program-goals';\n\nconst ALL_COLUMN_IDS = ['select', 'status', 'name', 'owner', 'audits', 'updated', 'actions'];\n\nconst statusBadgeStyles: Record<GoalDynamicStatus, string> = {\n  ok: 'bg-emerald-100 text-emerald-700 dark:bg-emerald-500/15 dark:text-emerald-300',\n  warn: 'bg-amber-100 text-amber-700 dark:bg-amber-500/15 dark:text-amber-200',\n  risk: 'bg-rose-100 text-rose-700 dark:bg-rose-500/15 dark:text-rose-300'\n};\n\nconst statusLabels: Record<GoalDynamicStatus, string> = {\n  ok: 'On Track',\n  warn: 'At Risk',\n  risk: 'Blocked'\n};\n\nconst GOAL_COLUMN_HEADERS: Record<string, string> = {\n  status: 'Status',\n  name: 'Goal',\n  owner: 'Owner',\n  audits: 'Audits',\n  updated: 'Updated'\n};\n\nconst GOAL_COLUMN_ACCESSORS: Record<string, (record: GoalRecord) => unknown> = {\n  status: record => statusLabels[record.dynamicStatus] ?? record.dynamicStatus,\n  name: record => record.name,\n  owner: record => record.owner,\n  audits: record => record.audits,\n  updated: record => record.updatedAt\n};\n\nconst STATUS_OPTIONS: GoalDynamicStatus[] = ['ok', 'warn', 'risk'];\n\nconst mapVisibleToState = (visible: string[]): VisibilityState => {\n  const hidden = ALL_COLUMN_IDS.filter(id => !visible.includes(id));\n  return hidden.reduce<VisibilityState>((acc, col) => {\n    acc[col] = false;\n    return acc;\n  }, {});\n};\n\nconst extractVisible = (visibility: VisibilityState): string[] =>\n  ALL_COLUMN_IDS.filter(id => visibility[id] !== false);\n\nconst visibilityEquals = (a: VisibilityState, b: VisibilityState): boolean => {\n  const keys = new Set([...Object.keys(a), ...Object.keys(b)]);\n  for (const key of keys) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst mapSortingFromQuery = (sort: string, order: 'asc' | 'desc'): SortingState =>\n  sort ? [{ id: sort, desc: order === 'desc' }] : [];\n\nconst formatDate = (iso: string) => {\n  try {\n    return new Intl.DateTimeFormat('en-GB', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric'\n    }).format(new Date(iso));\n  } catch (_) {\n    return 'â';\n  }\n};\n\nconst QueryDefaults = {\n  q: '',\n  status: [] as GoalDynamicStatus[],\n  sort: 'name',\n  order: 'asc' as 'asc' | 'desc',\n  page: 0,\n  pageSize: 10,\n  cols: ALL_COLUMN_IDS,\n  modal: '',\n  modalGoal: ''\n};\n\ntype QueryState = typeof QueryDefaults;\n\ntype RowMenuState = {\n  id: string;\n};\n\nconst skeletonRows = Array.from({ length: 6 }, (_, index) => index);\n\nconst ProgramGoalsPageContent: React.FC = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { showToast } = useToast();\n  const goalsRepo = useGoalsRepository();\n  const queryClient = useQueryClient();\n  const storedPrefs =\n    storage.get<{ pageSize: number; columns: string[] }>(STORAGE_KEY) ?? {\n      pageSize: 10,\n      columns: ALL_COLUMN_IDS\n    };\n\n  const [{\n    pageSize: defaultPageSize,\n    columns: defaultColumns\n  }] = useState({\n    pageSize: storedPrefs.pageSize ?? 10,\n    columns: storedPrefs.columns ?? ALL_COLUMN_IDS\n  });\n\n  const [query, setQuery] = useQuerySync<QueryState>({\n    defaults: {\n      ...QueryDefaults,\n      pageSize: defaultPageSize,\n      cols: defaultColumns\n    },\n    schema: {\n      q: 'string',\n      status: 'string[]',\n      sort: 'string',\n      order: 'string',\n      page: 'number',\n      pageSize: 'number',\n      cols: 'string[]',\n      modal: 'string',\n      modalGoal: 'string'\n    }\n  });\n\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>(() =>\n    mapVisibleToState(query.cols.length ? query.cols : ALL_COLUMN_IDS)\n  );\n  const [sorting, setSorting] = useState<SortingState>(() =>\n    mapSortingFromQuery(query.sort, query.order)\n  );\n  const [pagination, setPagination] = useState({\n    pageIndex: query.page,\n    pageSize: query.pageSize\n  });\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n  const [columnMenuOpen, setColumnMenuOpen] = useState(false);\n  const [rowMenu, setRowMenu] = useState<RowMenuState | null>(null);\n  const [deleteTarget, setDeleteTarget] = useState<GoalRecord | null>(null);\n  const [pendingAction, setPendingAction] = useState<'create' | 'edit' | 'delete' | null>(null);\n  const [importOpen, setImportOpen] = useState(false);\n\n  const lastUserActionRef = useRef<'filter' | 'modal' | null>(null);\n\n  const listQuery = useMemo(\n    () => ({\n      search: query.q,\n      status: (query.status as string[]).filter((value): value is GoalDynamicStatus =>\n        ['ok', 'warn', 'risk'].includes(value)\n      ),\n      sort: query.sort,\n      order: (query.order as 'asc' | 'desc') ?? 'asc'\n    }),\n    [query.q, query.status, query.sort, query.order]\n  );\n\n  const goalsQuery = useGoalsList({\n    search: query.q,\n    status: (query.status as string[]).filter((value): value is GoalDynamicStatus =>\n      ['ok', 'warn', 'risk'].includes(value)\n    ),\n    sort: query.sort,\n    order: (query.order as 'asc' | 'desc') ?? 'asc',\n    page: pagination.pageIndex,\n    pageSize: pagination.pageSize,\n    cols: query.cols\n  });\n\n  if (goalsQuery.isError) {\n    throw goalsQuery.error;\n  }\n\n  const goals = goalsQuery.data?.items ?? [];\n  const totalResults = goalsQuery.data?.total ?? 0;\n  const showSkeleton = goalsQuery.isInitialLoading;\n  const isFetching = goalsQuery.isFetching && !goalsQuery.isInitialLoading;\n\n  const createGoalMutation = useCreateGoal();\n  const updateGoalMutation = useUpdateGoal();\n  const deleteGoalMutation = useDeleteGoal();\n  const modalBusy = createGoalMutation.isPending || updateGoalMutation.isPending;\n  const deleteBusy = deleteGoalMutation.isPending && pendingAction === 'delete';\n\n  useEffect(() => {\n    storage.set(STORAGE_KEY, {\n      pageSize: query.pageSize,\n      columns: query.cols.length ? query.cols : ALL_COLUMN_IDS\n    });\n  }, [query.cols, query.pageSize]);\n\n  useEffect(() => {\n    if (lastUserActionRef.current === 'filter') {\n      setRowSelection({});\n      lastUserActionRef.current = null;\n    }\n  }, [query.q, query.status, query.sort, query.order, query.page, query.pageSize, query.cols]);\n\n  useEffect(() => {\n    const handleKeydown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setColumnMenuOpen(false);\n        setRowMenu(null);\n      }\n    };\n    document.addEventListener('keydown', handleKeydown);\n    return () => document.removeEventListener('keydown', handleKeydown);\n  }, []);\n\n  useEffect(() => {\n    if (!columnMenuOpen) {\n      return undefined;\n    }\n    const handleClick = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      if (!target.closest('[data-column-menu]')) {\n        setColumnMenuOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClick);\n    return () => document.removeEventListener('mousedown', handleClick);\n  }, [columnMenuOpen]);\n\n  useEffect(() => {\n    if (!rowMenu) {\n      return undefined;\n    }\n    const handleClick = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      if (!target.closest('[data-row-menu]')) {\n        setRowMenu(null);\n      }\n    };\n    document.addEventListener('mousedown', handleClick);\n    return () => document.removeEventListener('mousedown', handleClick);\n  }, [rowMenu]);\n\n  useEffect(() => {\n    setColumnVisibility(prev => {\n      const next = mapVisibleToState(query.cols.length ? query.cols : ALL_COLUMN_IDS);\n      return visibilityEquals(prev, next) ? prev : next;\n    });\n  }, [query.cols]);\n\n  useEffect(() => {\n    setSorting(mapSortingFromQuery(query.sort, query.order));\n  }, [query.sort, query.order]);\n\n  useEffect(() => {\n    setPagination(prev => {\n      const next = {\n        pageIndex: query.page,\n        pageSize: query.pageSize\n      };\n      if (prev.pageIndex !== next.pageIndex || prev.pageSize !== next.pageSize) {\n        return next;\n      }\n      return prev;\n    });\n  }, [query.page, query.pageSize]);\n\n  useEffect(() => {\n    const totalPages = Math.max(1, Math.ceil(goals.length / Math.max(1, pagination.pageSize)));\n    if (pagination.pageIndex >= totalPages) {\n      const nextIndex = Math.max(0, totalPages - 1);\n      if (nextIndex !== pagination.pageIndex) {\n        setPagination(prev => ({ ...prev, pageIndex: nextIndex }));\n        setQuery({ page: nextIndex });\n      }\n    }\n  }, [goals.length, pagination.pageIndex, pagination.pageSize, setQuery]);\n\n  const columnHelper = createColumnHelper<GoalRecord>();\n\n  const columns = useMemo<ColumnDef<GoalRecord, unknown>[]>(() => [\n    columnHelper.display({\n      id: 'select',\n      header: ({ table }) => (\n        <input\n          type=\"checkbox\"\n          className=\"h-4 w-4 rounded border-slate-300 text-slate-700 focus:ring-slate-500\"\n          checked={table.getIsAllPageRowsSelected()}\n          onChange={table.getToggleAllPageRowsSelectedHandler()}\n          aria-label=\"Select all rows\"\n        />\n      ),\n      cell: ({ row }) => (\n        <input\n          type=\"checkbox\"\n          className=\"h-4 w-4 rounded border-slate-300 text-slate-700 focus:ring-slate-500\"\n          checked={row.getIsSelected()}\n          onChange={row.getToggleSelectedHandler()}\n          aria-label={`Select ${row.original.name}`}\n        />\n      ),\n      enableSorting: false,\n      meta: { label: 'Select' }\n    }),\n    columnHelper.accessor('dynamicStatus', {\n      id: 'status',\n      header: () => 'Status',\n      cell: info => (\n        <span\n          className={`inline-flex items-center gap-1 rounded-full px-2.5 py-1 text-xs font-medium ${statusBadgeStyles[info.getValue()]}`}\n        >\n          <span className=\"h-1.5 w-1.5 rounded-full bg-current\" />\n          {statusLabels[info.getValue()]}\n        </span>\n      ),\n      sortingFn: 'alphanumeric',\n      meta: { label: 'Status' }\n    }),\n    columnHelper.accessor('name', {\n      header: () => 'Goal',\n      cell: info => (\n        <div className=\"flex items-start justify-between gap-2\">\n          <div>\n            <Link\n              to={{ pathname: `/program/goals/${info.row.original.id}`, search: location.search }}\n              className=\"font-medium text-slate-900 hover:text-slate-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:text-slate-100 dark:hover:text-slate-200\"\n            >\n              {info.getValue()}\n            </Link>\n            <div className=\"text-xs text-slate-500 dark:text-slate-400\">{info.row.original.id}</div>\n          </div>\n        </div>\n      ),\n      sortingFn: 'alphanumeric',\n      meta: { label: 'Goal' }\n    }),\n    columnHelper.accessor('owner', {\n      header: () => 'Owner',\n      cell: info => info.getValue(),\n      sortingFn: 'alphanumeric',\n      meta: { label: 'Owner' }\n    }),\n    columnHelper.accessor('audits', {\n      header: () => 'Audits',\n      cell: info => info.getValue(),\n      sortingFn: 'basic',\n      meta: { label: 'Audits' }\n    }),\n    columnHelper.accessor('updatedAt', {\n      id: 'updated',\n      header: () => 'Updated',\n      cell: info => (\n        <span className=\"text-slate-600 dark:text-slate-300\">{formatDate(info.getValue())}</span>\n      ),\n      sortingFn: 'alphanumeric',\n      meta: { label: 'Updated' }\n    }),\n    columnHelper.display({\n      id: 'actions',\n      header: () => <span className=\"sr-only\">Actions</span>,\n      cell: ({ row }) => {\n        const isOpen = rowMenu?.id === row.original.id;\n        return (\n          <div className=\"relative\" data-row-menu>\n            <button\n              type=\"button\"\n              onClick={event => {\n                event.stopPropagation();\n                setRowMenu(prev => (prev?.id === row.original.id ? null : { id: row.original.id }));\n              }}\n              aria-haspopup=\"menu\"\n              aria-expanded={isOpen}\n              className=\"rounded-full p-1 text-slate-500 transition hover:bg-slate-100 hover:text-slate-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:text-slate-300 dark:hover:bg-slate-800\"\n            >\n              <EllipsisVertical className=\"h-5 w-5\" aria-hidden=\"true\" />\n              <span className=\"sr-only\">Open actions</span>\n            </button>\n            {isOpen ? (\n              <div\n                role=\"menu\"\n                aria-label={`${row.original.name} actions`}\n                className=\"absolute right-0 z-10 mt-2 w-40 rounded-xl border border-slate-200 bg-white p-1 text-sm shadow-lg dark:border-slate-700 dark:bg-slate-900\"\n              >\n                <button\n                  type=\"button\"\n                  role=\"menuitem\"\n                  className=\"flex w-full items-center gap-2 rounded-lg px-3 py-2 text-left text-slate-600 hover:bg-slate-100 hover:text-slate-900 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:text-slate-300 dark:hover:bg-slate-800\"\n                  onClick={() => {\n                    setRowMenu(null);\n                    openEditModal(row.original.id);\n                  }}\n                >\n                  Edit\n                </button>\n                <button\n                  type=\"button\"\n                  role=\"menuitem\"\n                  className=\"flex w-full items-center gap-2 rounded-lg px-3 py-2 text-left text-rose-600 hover:bg-rose-50 hover:text-rose-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-rose-500 dark:text-rose-300 dark:hover:bg-rose-500/20\"\n                  onClick={() => {\n                    setRowMenu(null);\n                    setDeleteTarget(row.original);\n                  }}\n                >\n                  Delete\n                </button>\n              </div>\n            ) : null}\n          </div>\n        );\n      },\n      enableSorting: false,\n      meta: { label: 'Actions' }\n    })\n  ], [columnHelper, location.search, rowMenu]);\n\n  const table = useReactTable({\n    data: goals,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      pagination,\n      rowSelection\n    },\n    onSortingChange: updater => {\n      setSorting(prev => {\n        const next = typeof updater === 'function' ? updater(prev) : updater;\n        if (!next.length) {\n          setQuery({ sort: 'name', order: 'asc' });\n          lastUserActionRef.current = 'filter';\n          return next;\n        }\n        const [first] = next;\n        setQuery({ sort: first.id, order: first.desc ? 'desc' : 'asc' });\n        lastUserActionRef.current = 'filter';\n        return next;\n      });\n    },\n    onColumnVisibilityChange: updater => {\n      setColumnVisibility(prev => {\n        const next = typeof updater === 'function' ? updater(prev) : (updater as VisibilityState);\n        const visible = extractVisible(next);\n        setQuery({ cols: visible });\n        return next;\n      });\n    },\n    onPaginationChange: updater => {\n      setPagination(prev => {\n        const next = typeof updater === 'function' ? updater(prev) : updater;\n        if (prev.pageIndex !== next.pageIndex) {\n          setQuery({ page: next.pageIndex });\n          lastUserActionRef.current = 'filter';\n        }\n        if (prev.pageSize !== next.pageSize) {\n          setQuery({ pageSize: next.pageSize, page: 0 });\n          lastUserActionRef.current = 'filter';\n          return { ...next, pageIndex: 0 };\n        }\n        return next;\n      });\n    },\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    enableSortingRemoval: true,\n    autoResetPageIndex: false,\n    manualPagination: true,\n    pageCount: Math.max(1, Math.ceil(totalResults / Math.max(1, pagination.pageSize))),\n    debugTable: false\n  });\n\n  const pageCount = Math.max(1, Math.ceil(totalResults / Math.max(1, pagination.pageSize)));\n  const currentPage = table.getState().pagination.pageIndex;\n\n  const visibleColumns = extractVisible(columnVisibility);\n  const hasFilters = Boolean(query.q || (query.status as GoalDynamicStatus[]).length);\n  const showEmpty = !showSkeleton && totalResults === 0 && !hasFilters;\n  const showNoResults = !showSkeleton && totalResults === 0 && hasFilters;\n\n  const createModalOpen = query.modal === 'create';\n  const editModalOpen = query.modal === 'edit' && Boolean(query.modalGoal);\n\n  const { data: editGoalData } = useGoal(editModalOpen ? query.modalGoal : null);\n  const editTarget = useMemo(\n    () => editGoalData ?? goals.find(goal => goal.id === query.modalGoal),\n    [editGoalData, goals, query.modalGoal]\n  );\n\n  const openCreateModal = () => {\n    lastUserActionRef.current = 'modal';\n    const params = new URLSearchParams(location.search);\n    params.set('modal', 'create');\n    params.delete('modalGoal');\n    navigate({ pathname: location.pathname, search: params.toString() }, { replace: false });\n  };\n\n  const openEditModal = (goalId: string) => {\n    lastUserActionRef.current = 'modal';\n    const params = new URLSearchParams(location.search);\n    params.set('modal', 'edit');\n    params.set('modalGoal', goalId);\n    navigate({ pathname: location.pathname, search: params.toString() }, { replace: false });\n  };\n\n  const closeModal = () => {\n    const params = new URLSearchParams(location.search);\n    params.delete('modal');\n    params.delete('modalGoal');\n    navigate({ pathname: location.pathname, search: params.toString() }, { replace: true });\n  };\n\n  const handleSearch = (value: string) => {\n    lastUserActionRef.current = 'filter';\n    setQuery({ q: value, page: 0 });\n  };\n\n  const toggleStatus = (status: GoalDynamicStatus) => {\n    lastUserActionRef.current = 'filter';\n    const current = new Set(query.status as GoalDynamicStatus[]);\n    if (current.has(status)) {\n      current.delete(status);\n    } else {\n      current.add(status);\n    }\n    setQuery({ status: Array.from(current), page: 0 });\n  };\n\n  const clearFilters = () => {\n    lastUserActionRef.current = 'filter';\n    setQuery({ q: '', status: [], page: 0 });\n  };\n\n  const handleImportButton = () => {\n    setImportOpen(true);\n  };\n\n  const handleImportDenied = () => {\n    pushNotice({\n      type: 'warning',\n      title: 'Action denied',\n      body: 'You do not have permission to import goals.',\n      link: '/system'\n    });\n  };\n\n  const handleStartImport = async (payload: GoalsImportPayload) => {\n    startGoalsImport(payload, {\n      repository: goalsRepo,\n      onRefresh: () => invalidateGoalsList(queryClient)\n    });\n  };\n\n  const handleCreate = async (values: GoalFormValues) => {\n    setPendingAction('create');\n    try {\n      await createGoalMutation.mutateAsync(values);\n      closeModal();\n    } catch (error) {\n      const normalized = normalizeError(error, 'Please try again later.');\n      showToast({\n        title: 'Could not create goal',\n        description: normalized.message,\n        tone: 'error'\n      });\n      throw normalized;\n    } finally {\n      setPendingAction(null);\n    }\n  };\n\n  const handleEdit = async (values: GoalFormValues) => {\n    if (!editTarget) {\n      return;\n    }\n    setPendingAction('edit');\n    try {\n      await updateGoalMutation.mutateAsync({ id: editTarget.id, input: values });\n      closeModal();\n    } catch (error) {\n      const normalized = normalizeError(error, 'Please try again later.');\n      showToast({\n        title: 'Could not save goal',\n        description: normalized.message,\n        tone: 'error'\n      });\n      throw normalized;\n    } finally {\n      setPendingAction(null);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deleteTarget) return;\n    setPendingAction('delete');\n    try {\n      await deleteGoalMutation.mutateAsync(deleteTarget.id);\n      setDeleteTarget(null);\n    } catch (error) {\n      showToast({\n        title: 'Could not delete goal',\n        description: normalizeError(error, 'Please try again later.').message,\n        tone: 'error'\n      });\n    } finally {\n      setPendingAction(null);\n    }\n  };\n\n  return (\n    <section className=\"flex flex-1 flex-col gap-5\" aria-labelledby=\"goals-heading\">\n      <header className=\"flex flex-wrap items-start justify-between gap-3\">\n        <div>\n          <h1 id=\"goals-heading\" className=\"text-xl font-semibold text-slate-900 dark:text-slate-100\">\n            Strategic goals\n          </h1>\n          <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n            Track goal performance, audit cadence, and owners across the TAXIPartner program.\n          </p>\n        </div>\n        <div className=\"flex flex-wrap items-center gap-2\">\n          <Guard\n            can=\"program.goals.import\"\n            fallback={\n              <button\n                type=\"button\"\n                onClick={handleImportDenied}\n                className=\"inline-flex items-center gap-2 rounded-xl border border-dashed border-slate-300 px-4 py-2 text-sm font-medium text-slate-400 shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-500\"\n              >\n                Import CSV\n              </button>\n            }\n          >\n            <button\n              type=\"button\"\n              onClick={handleImportButton}\n              className=\"inline-flex items-center gap-2 rounded-xl border border-slate-200 bg-white px-4 py-2 text-sm font-medium text-slate-700 shadow-sm transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200 dark:hover:bg-slate-800\"\n            >\n              Import CSV\n            </button>\n          </Guard>\n          <button\n            type=\"button\"\n            onClick={openCreateModal}\n            className=\"inline-flex items-center gap-2 rounded-xl bg-slate-900 px-4 py-2 text-sm font-medium text-white shadow-sm transition hover:bg-slate-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:bg-slate-100 dark:text-slate-900 dark:hover:bg-slate-200\"\n          >\n            <PlusCircle className=\"h-4 w-4\" aria-hidden=\"true\" />\n            New goal\n          </button>\n        </div>\n      </header>\n\n      <div className=\"flex flex-wrap items-center gap-3 rounded-2xl border border-slate-200 bg-white p-4 text-sm shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n        <div className=\"relative flex-1 min-w-[220px]\">\n          <Search className=\"pointer-events-none absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-slate-400\" aria-hidden=\"true\" />\n          <input\n            type=\"search\"\n            placeholder=\"Search goals, owners, or IDsâ¦\"\n            value={query.q}\n            onChange={event => handleSearch(event.target.value)}\n            className=\"w-full rounded-xl border border-slate-200 bg-white py-2 pl-10 pr-3 text-sm text-slate-700 shadow-inner focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200 dark:focus:border-slate-400\"\n          />\n        </div>\n        <div className=\"flex flex-wrap items-center gap-2\">\n          {STATUS_OPTIONS.map(status => {\n            const active = (query.status as GoalDynamicStatus[]).includes(status);\n            return (\n              <button\n                key={status}\n                type=\"button\"\n                onClick={() => toggleStatus(status)}\n                className={`inline-flex items-center gap-2 rounded-lg px-3 py-1.5 text-sm font-medium transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:focus-visible:outline-slate-400 ${\n                  active\n                    ? 'bg-slate-900 text-white dark:bg-slate-100 dark:text-slate-900'\n                    : 'border border-slate-200 text-slate-600 hover:bg-slate-100 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800'\n                }`}\n              >\n                <Filter className=\"h-4 w-4\" aria-hidden=\"true\" />\n                {statusLabels[status]}\n              </button>\n            );\n          })}\n          {hasFilters ? (\n            <button\n              type=\"button\"\n              onClick={clearFilters}\n              className=\"inline-flex items-center gap-1 rounded-lg border border-slate-200 px-3 py-1.5 text-sm text-slate-500 hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800 dark:focus-visible:outline-slate-400\"\n            >\n              Clear\n            </button>\n          ) : null}\n        </div>\n        <div className=\"ml-auto flex items-center gap-2\">\n          <button\n            type=\"button\"\n            onClick={handleExport}\n            disabled={!goals.length}\n            className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            <Download className=\"h-4 w-4\" aria-hidden=\"true\" />\n            Export CSV\n          </button>\n          <ViewsMenu\n            currentQuery={{\n              q: query.q,\n              status: query.status,\n              sort: query.sort,\n              order: query.order,\n              page: pagination.pageIndex,\n              pageSize: pagination.pageSize,\n              cols: query.cols\n            }}\n            onApply={next => {\n              const payload: Record<string, unknown> = {};\n              if ('q' in next) payload.q = next.q;\n              if ('status' in next) payload.status = next.status;\n              if ('sort' in next) payload.sort = next.sort;\n              if ('order' in next) payload.order = next.order;\n              if ('pageSize' in next) payload.pageSize = next.pageSize;\n              if ('cols' in next) payload.cols = next.cols;\n              if ('page' in next) payload.page = next.page;\n              setQuery(payload);\n            }}\n          />\n          <div data-column-menu className=\"relative\">\n            <button\n              type=\"button\"\n              onClick={() => setColumnMenuOpen(prev => !prev)}\n              aria-haspopup=\"menu\"\n              aria-expanded={columnMenuOpen}\n              className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800 dark:focus-visible:outline-slate-400\"\n            >\n              <Columns3 className=\"h-4 w-4\" aria-hidden=\"true\" />\n              Columns\n            </button>\n            {columnMenuOpen ? (\n              <div\n                role=\"menu\"\n                tabIndex={-1}\n                className=\"absolute right-0 z-20 mt-2 w-56 rounded-2xl border border-slate-200 bg-white p-4 text-sm shadow-xl dark:border-slate-700 dark:bg-slate-900\"\n              >\n                <p className=\"mb-3 font-semibold text-slate-700 dark:text-slate-200\">Visible columns</p>\n                <ul className=\"space-y-2\">\n                  {ALL_COLUMN_IDS.filter(id => id !== 'select').map(columnId => {\n                    const column = table.getColumn(columnId);\n                    if (!column) return null;\n                    return (\n                      <li key={columnId}>\n                        <label className=\"flex items-center gap-2\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-4 w-4 rounded border-slate-300 text-slate-700 focus:ring-slate-500\"\n                            checked={column.getIsVisible()}\n                            onChange={column.getToggleVisibilityHandler()}\n                          />\n                          <span className=\"text-slate-600 dark:text-slate-300\">\n                            {column.columnDef.meta?.label ?? columnId}\n                          </span>\n                        </label>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            ) : null}\n          </div>\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800 dark:focus-visible:outline-slate-400\"\n          >\n            <ListChecks className=\"h-4 w-4\" aria-hidden=\"true\" />\n            Sort\n          </button>\n        </div>\n      </div>\n\n      <div\n        className=\"overflow-hidden rounded-2xl border border-slate-200 bg-white shadow-sm dark:border-slate-800 dark:bg-slate-900\"\n        style={{ contain: 'paint', willChange: 'transform' }}\n      >\n          <table className=\"min-w-full divide-y divide-slate-200 text-sm leading-6 dark:divide-slate-800\">\n            <thead className=\"bg-slate-50 text-left font-semibold text-slate-500 dark:bg-slate-900/60 dark:text-slate-300\">\n              {table.getHeaderGroups().map(headerGroup => (\n                <tr key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const canSort = header.column.getCanSort();\n                    const sortState = header.column.getIsSorted();\n                    return (\n                      <th key={header.id} scope=\"col\" className=\"px-4 py-3\">\n                        {canSort ? (\n                          <button\n                            type=\"button\"\n                            onClick={header.column.getToggleSortingHandler()}\n                            className=\"inline-flex items-center gap-1 rounded-lg px-1 py-0.5 text-left transition hover:text-slate-900 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:focus-visible:outline-slate-400\"\n                          >\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                            {sortState === 'asc'\n                              ? 'â²'\n                              : sortState === 'desc'\n                              ? 'â¼'\n                              : ''}\n                          </button>\n                        ) : (\n                          flexRender(header.column.columnDef.header, header.getContext())\n                        )}\n                      </th>\n                    );\n                  })}\n                </tr>\n              ))}\n            </thead>\n            <tbody className=\"divide-y divide-slate-200 dark:divide-slate-800\">\n              {showSkeleton\n                ? skeletonRows.map(row => (\n                    <tr key={row} className=\"animate-pulse\">\n                      {visibleColumns.map(columnId => (\n                        <td key={columnId} className=\"px-4 py-3\">\n                          <div className=\"h-4 w-full rounded bg-slate-200/70 dark:bg-slate-700/60\" />\n                        </td>\n                      ))}\n                    </tr>\n                  ))\n                : table.getRowModel().rows.map(row => (\n                    <tr key={row.id} className=\"hover:bg-slate-50 dark:hover:bg-slate-900/60\">\n                      {row.getVisibleCells().map(cell => (\n                        <td key={cell.id} className=\"px-4 py-3 text-slate-600 dark:text-slate-200\">\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </td>\n                      ))}\n                    </tr>\n                  ))}\n              {showEmpty ? (\n                <tr>\n                  <td colSpan={visibleColumns.length} className=\"px-4 py-16 text-center\">\n                    <div className=\"mx-auto flex max-w-md flex-col items-center gap-4 text-slate-500 dark:text-slate-300\">\n                      <div className=\"h-16 w-16 rounded-full bg-slate-100 dark:bg-slate-800\" />\n                      <div>\n                        <p className=\"text-base font-semibold\">No goals yet</p>\n                        <p className=\"mt-1 text-sm\">\n                          Create your first program goal to start tracking progress and cadence.\n                        </p>\n                      </div>\n                      <button\n                        type=\"button\"\n                        onClick={openCreateModal}\n                        className=\"inline-flex items-center gap-2 rounded-lg bg-slate-900 px-4 py-2 text-sm font-semibold text-white transition hover:bg-slate-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:bg-slate-100 dark:text-slate-900 dark:hover:bg-slate-200\"\n                      >\n                        <PlusCircle className=\"h-4 w-4\" aria-hidden=\"true\" />\n                        Add first goal\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ) : null}\n              {showNoResults ? (\n                <tr>\n                  <td colSpan={visibleColumns.length} className=\"px-4 py-10 text-center text-sm text-slate-500 dark:text-slate-300\">\n                    <div className=\"flex flex-col items-center gap-3\">\n                      <p>No goals match the current filters.</p>\n                      <button\n                        type=\"button\"\n                        onClick={clearFilters}\n                        className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm text-slate-600 hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n                      >\n                        <Filter className=\"h-4 w-4\" aria-hidden=\"true\" />\n                        Clear filters\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ) : null}\n              {!showSkeleton && !showEmpty && !showNoResults && table.getRowModel().rows.length === 0 ? (\n                <tr>\n                  <td colSpan={visibleColumns.length} className=\"px-4 py-10 text-center text-sm text-slate-500 dark:text-slate-300\">\n                    No goals available.\n                  </td>\n                </tr>\n              ) : null}\n            </tbody>\n          </table>\n        </div>\n\n      <footer className=\"flex flex-wrap items-center justify-between gap-3 text-sm text-slate-500 dark:text-slate-400\">\n        <div>\n          Page {currentPage + 1} of {pageCount || 1} â¢ {totalResults} results\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <label className=\"flex items-center gap-2\">\n            Rows:\n            <select\n              value={table.getState().pagination.pageSize}\n              onChange={event => table.setPageSize(Number(event.target.value))}\n              className=\"rounded-lg border border-slate-200 bg-white px-2 py-1 text-sm text-slate-600 focus:border-slate-500 focus:outline-none focus-visible:ring-1 focus-visible:ring-slate-500 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200\"\n            >\n              {[10, 20, 50].map(size => (\n                <option key={size} value={size}>\n                  {size}\n                </option>\n              ))}\n            </select>\n          </label>\n          <div className=\"flex items-center gap-1\">\n            <button\n              type=\"button\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n              className=\"rounded-lg border border-slate-200 px-3 py-1 text-sm font-medium text-slate-600 transition hover:bg-slate-100 disabled:cursor-not-allowed disabled:opacity-50 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n            >\n              Prev\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n              className=\"rounded-lg border border-slate-200 px-3 py-1 text-sm font-medium text-slate-600 transition hover:bg-slate-100 disabled:cursor-not-allowed disabled:opacity-50 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </footer>\n\n      <Modal\n        isOpen={createModalOpen}\n        onClose={closeModal}\n        title=\"Create goal\"\n        description=\"Document a new strategic goal and assign an owner.\"\n      >\n        <GoalForm\n          onSubmit={handleCreate}\n          onCancel={closeModal}\n          submitLabel=\"Create goal\"\n          busy={modalBusy}\n        />\n      </Modal>\n\n      <Modal\n        isOpen={editModalOpen && Boolean(editTarget)}\n        onClose={closeModal}\n        title=\"Edit goal\"\n        description={editTarget ? `Update ${editTarget.name} and keep stakeholders in sync.` : undefined}\n      >\n        <GoalForm\n          initialValues={editTarget ?? undefined}\n          onSubmit={handleEdit}\n          onCancel={closeModal}\n          submitLabel=\"Save changes\"\n          busy={modalBusy}\n        />\n      </Modal>\n\n      <ConfirmDialog\n        isOpen={Boolean(deleteTarget)}\n        title=\"Delete goal\"\n        description={deleteTarget ? `This will remove ${deleteTarget.name} from the program goals.` : undefined}\n        confirmLabel=\"Delete\"\n        onConfirm={handleDelete}\n        onCancel={() => setDeleteTarget(null)}\n        loading={deleteBusy}\n      />\n      <ImportDialog\n        isOpen={importOpen}\n        onClose={() => setImportOpen(false)}\n        onStart={async payload => {\n          await handleStartImport(payload);\n        }}\n      />\n    </section>\n  );\n};\n\nconst ProgramGoalsPage: React.FC = () => (\n  <QueryErrorBoundary>\n    <ProgramGoalsPageContent />\n  </QueryErrorBoundary>\n);\n\nexport default ProgramGoalsPage;\n  const handleExport = () => {\n    const exportColumns = visibleColumns\n      .filter(columnId => columnId !== 'select' && columnId !== 'actions')\n      .map(columnId => {\n        const header = GOAL_COLUMN_HEADERS[columnId] ?? columnId;\n        const accessor =\n          GOAL_COLUMN_ACCESSORS[columnId] ??\n          ((record: GoalRecord) => (record as Record<string, unknown>)[columnId]);\n        return {\n          id: columnId,\n          header,\n          accessor\n        };\n      });\n    startCsvExport<GoalRecord>({\n      module: 'program-goals',\n      filename: 'program-goals.csv',\n      columns: exportColumns,\n      rows: goals,\n      totalCount: totalResults,\n      query: {\n        ...query,\n        visibleColumns\n      },\n      threshold: 750\n    });\n  };\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/ReleaseManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/RolesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/SecOpsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/SessionsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/SystemPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/TenantsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/UsersPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/VehiclesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/compliance/AnalysisPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/compliance/ComplianceCategoryPage.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"ColumnDef\", \"SortingState\" and \"VisibilityState\" are only used as type.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":8,"endColumn":32,"fix":{"range":[61,117],"text":"import type {\n  ColumnDef,\n  SortingState,\n  VisibilityState} from '@tanstack/react-table';\nimport {"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useEffect, useMemo, useState } from 'react';\nimport {\n  ColumnDef,\n  SortingState,\n  VisibilityState,\n  getCoreRowModel,\n  useReactTable\n} from '@tanstack/react-table';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Columns3,\n  Download,\n  Loader2,\n  PlusCircle,\n  Search\n} from 'lucide-react';\nimport {\n  useComplianceList,\n  useCreateCompliance,\n  useDeleteCompliance,\n  useUpdateCompliance\n} from '../../features/compliance/api';\nimport type {\n  ComplianceCategory,\n  ComplianceRecord,\n  ComplianceStatus\n} from '../../lib/repo/compliance/types';\nimport ViewsMenu from '../../components/views/ViewsMenu';\nimport QueryErrorBoundary from '../../components/errors/QueryErrorBoundary';\nimport VirtualTable from '../../components/table/VirtualTable';\nimport { Guard } from '../../lib/rbac/guard';\nimport GoalForm from '../../features/program/goals/GoalForm';\nimport Modal from '../../components/overlay/Modal';\nimport ConfirmDialog from '../../components/overlay/ConfirmDialog';\nimport { useToast } from '../../components/feedback/ToastProvider';\nimport type { GoalFormValues } from '../../lib/forms/validation';\nimport useQuerySync from '../../hooks/useQuerySync';\nimport { startCsvExport } from '../../lib/export/exportCsv';\n\nconst STATUS_OPTIONS: ComplianceStatus[] = ['ok', 'attention', 'blocked'];\n\nconst statusBadgeStyles: Record<ComplianceStatus, string> = {\n  ok: 'bg-emerald-100 text-emerald-700 dark:bg-emerald-500/20 dark:text-emerald-200',\n  attention: 'bg-amber-100 text-amber-700 dark:bg-amber-500/20 dark:text-amber-200',\n  blocked: 'bg-rose-100 text-rose-700 dark:bg-rose-500/20 dark:text-rose-200'\n};\n\nconst toGoalFormValues = (record: ComplianceRecord): GoalFormValues => ({\n  name: record.name,\n  owner: record.owner,\n  audits: record.items ?? 0,\n  dynamicStatus: record.status as any\n});\n\nconst ALL_COLUMN_IDS = ['status', 'name', 'owner', 'items', 'updatedAt', 'actions'] as const;\n\nconst COLUMN_HEADERS: Record<(typeof ALL_COLUMN_IDS)[number], string> = {\n  status: 'Status',\n  name: 'Name',\n  owner: 'Owner',\n  items: 'Items',\n  updatedAt: 'Updated',\n  actions: 'Actions'\n};\n\nconst COLUMN_ACCESSORS: Record<\n  Exclude<(typeof ALL_COLUMN_IDS)[number], 'actions'>,\n  (record: ComplianceRecord) => unknown\n> = {\n  status: record => record.status,\n  name: record => record.name,\n  owner: record => record.owner,\n  items: record => record.items ?? '',\n  updatedAt: record => record.updatedAt\n};\n\nconst mapVisibleToState = (visible: string[]): VisibilityState => {\n  const hidden = ALL_COLUMN_IDS.filter(id => !visible.includes(id));\n  return hidden.reduce<VisibilityState>((acc, columnId) => {\n    acc[columnId] = false;\n    return acc;\n  }, {});\n};\n\nconst extractVisible = (visibility: VisibilityState) =>\n  ALL_COLUMN_IDS.filter(id => visibility[id] !== false);\n\nconst mapSortingFromQuery = (sort: string, order: 'asc' | 'desc'): SortingState =>\n  sort ? [{ id: sort, desc: order === 'desc' }] : [];\n\nconst DEFAULT_SORT = { sort: 'updatedAt', order: 'desc' as const };\n\nconst QueryDefaults = {\n  q: '',\n  status: [] as ComplianceStatus[],\n  sort: DEFAULT_SORT.sort,\n  order: DEFAULT_SORT.order,\n  page: 0,\n  pageSize: 20,\n  cols: ALL_COLUMN_IDS.map(String)\n};\n\ntype QueryState = typeof QueryDefaults;\n\nconst ComplianceCategoryContent: React.FC<{\n  category: ComplianceCategory;\n  title: string;\n  description: string;\n}> = ({ category, title, description }) => {\n  const { showToast } = useToast();\n  const [query, setQuery] = useQuerySync<QueryState>({\n    defaults: QueryDefaults,\n    schema: {\n      q: 'string',\n      status: 'string[]',\n      sort: 'string',\n      order: 'string',\n      page: 'number',\n      pageSize: 'number',\n      cols: 'string[]'\n    }\n  });\n  const [modalState, setModalState] = useState<{ mode: 'create' | 'edit' | null; record?: ComplianceRecord }>({\n    mode: null\n  });\n  const [deleteTarget, setDeleteTarget] = useState<ComplianceRecord | null>(null);\n  const [columnMenuOpen, setColumnMenuOpen] = useState(false);\n\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>(() =>\n    mapVisibleToState(query.cols.length ? query.cols : ALL_COLUMN_IDS.map(String))\n  );\n  const [sorting, setSorting] = useState<SortingState>(() =>\n    mapSortingFromQuery(query.sort, query.order)\n  );\n  const [pagination, setPagination] = useState({\n    pageIndex: query.page,\n    pageSize: query.pageSize\n  });\n\n  useEffect(() => {\n    setColumnVisibility(prev => {\n      const next = mapVisibleToState(query.cols.length ? query.cols : ALL_COLUMN_IDS.map(String));\n      const prevVisible = extractVisible(prev).join(',');\n      const nextVisible = extractVisible(next).join(',');\n      return prevVisible === nextVisible ? prev : next;\n    });\n  }, [query.cols]);\n\n  useEffect(() => {\n    setSorting(mapSortingFromQuery(query.sort, query.order));\n  }, [query.sort, query.order]);\n\n  useEffect(() => {\n    setPagination(prev => {\n      if (prev.pageIndex === query.page && prev.pageSize === query.pageSize) {\n        return prev;\n      }\n      return {\n        pageIndex: query.page,\n        pageSize: query.pageSize\n      };\n    });\n  }, [query.page, query.pageSize]);\n\n  useEffect(() => {\n    if (!columnMenuOpen) return undefined;\n    const handleClick = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      if (!target.closest('[data-column-menu]')) {\n        setColumnMenuOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClick);\n    return () => document.removeEventListener('mousedown', handleClick);\n  }, [columnMenuOpen]);\n\n  const selectedStatuses = useMemo(\n    () =>\n      (query.status as string[]).filter((value): value is ComplianceStatus =>\n        STATUS_OPTIONS.includes(value as ComplianceStatus)\n      ),\n    [query.status]\n  );\n\n  const visibleColumns = useMemo(() => extractVisible(columnVisibility), [columnVisibility]);\n\n  const listQuery = useMemo(\n    () => ({\n      category,\n      q: query.q,\n      status: selectedStatuses,\n      sort: query.sort,\n      order: query.order as 'asc' | 'desc',\n      page: pagination.pageIndex,\n      pageSize: pagination.pageSize,\n      cols: visibleColumns\n    }),\n    [\n      category,\n      query.q,\n      selectedStatuses,\n      query.sort,\n      query.order,\n      pagination.pageIndex,\n      pagination.pageSize,\n      visibleColumns\n    ]\n  );\n\n  const list = useComplianceList(listQuery);\n  const createMutation = useCreateCompliance();\n  const updateMutation = useUpdateCompliance();\n  const deleteMutation = useDeleteCompliance();\n\n  const rows = list.data?.items ?? [];\n  const total = list.data?.total ?? 0;\n\n  const columns = useMemo<ColumnDef<ComplianceRecord>[]>(\n    () => [\n      {\n        accessorKey: 'status',\n        header: () => 'Status',\n        cell: info => (\n          <span\n            className={`inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-xs font-medium ${\n              statusBadgeStyles[info.getValue() as ComplianceStatus]\n            }`}\n          >\n            <span className=\"h-1.5 w-1.5 rounded-full bg-current\" />\n            {String(info.getValue())}\n          </span>\n        ),\n        enableSorting: true\n      },\n      {\n        accessorKey: 'name',\n        header: () => 'Name',\n        cell: info => (\n          <div>\n            <p className=\"font-medium text-slate-900 dark:text-slate-100\">{String(info.getValue())}</p>\n            <p className=\"text-xs text-slate-500 dark:text-slate-400\">{info.row.original.id}</p>\n          </div>\n        ),\n        enableSorting: true\n      },\n      {\n        accessorKey: 'owner',\n        header: () => 'Owner',\n        cell: info => String(info.getValue()),\n        enableSorting: true\n      },\n      {\n        accessorKey: 'items',\n        header: () => 'Items',\n        cell: info => info.getValue() ?? '-',\n        enableSorting: true\n      },\n      {\n        accessorKey: 'updatedAt',\n        header: () => 'Updated',\n        cell: info => new Date(String(info.getValue())).toLocaleString(),\n        enableSorting: true\n      },\n      {\n        id: 'actions',\n        header: () => 'Actions',\n        cell: info => (\n          <div className=\"flex gap-2\">\n            <Guard can=\"compliance.write\">\n              <button\n                type=\"button\"\n                onClick={() => setModalState({ mode: 'edit', record: info.row.original })}\n                className=\"text-xs text-slate-500 underline-offset-2 hover:underline dark:text-slate-300\"\n              >\n                Edit\n              </button>\n            </Guard>\n            <Guard can=\"compliance.delete\" fallback={null}>\n              <button\n                type=\"button\"\n                onClick={() => setDeleteTarget(info.row.original)}\n                className=\"text-xs text-rose-500 underline-offset-2 hover:underline\"\n              >\n                Delete\n              </button>\n            </Guard>\n          </div>\n        )\n      }\n    ],\n    []\n  );\n\n  const table = useReactTable({\n    data: rows,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      pagination\n    },\n    onSortingChange: updater => {\n      setSorting(prev => {\n        const next = typeof updater === 'function' ? updater(prev) : updater;\n        if (!next.length) {\n          setQuery({ sort: DEFAULT_SORT.sort, order: DEFAULT_SORT.order });\n          return next;\n        }\n        const [first] = next;\n        setQuery({ sort: first.id, order: first.desc ? 'desc' : 'asc' });\n        return next;\n      });\n    },\n    onColumnVisibilityChange: updater => {\n      setColumnVisibility(prev => {\n        const next =\n          typeof updater === 'function' ? updater(prev) : (updater as VisibilityState);\n        const visible = extractVisible(next);\n        setQuery({ cols: visible });\n        return next;\n      });\n    },\n    onPaginationChange: updater => {\n      setPagination(prev => {\n        const next = typeof updater === 'function' ? updater(prev) : updater;\n        if (next.pageSize !== prev.pageSize) {\n          setQuery({ pageSize: next.pageSize, page: 0 });\n          return { ...next, pageIndex: 0 };\n        }\n        if (next.pageIndex !== prev.pageIndex) {\n          setQuery({ page: next.pageIndex });\n        }\n        return next;\n      });\n    },\n    getCoreRowModel: getCoreRowModel(),\n    enableSortingRemoval: true,\n    manualSorting: true,\n    manualPagination: true,\n    autoResetPageIndex: false,\n    pageCount: Math.max(1, Math.ceil(total / Math.max(1, pagination.pageSize))),\n    debugTable: false\n  });\n\n  const handleSubmit = async (values: GoalFormValues) => {\n    if (modalState.mode === 'edit' && modalState.record) {\n      await updateMutation.mutateAsync({\n        id: modalState.record.id,\n        input: {\n          name: values.name,\n          owner: values.owner,\n          status: values.dynamicStatus as ComplianceStatus,\n          items: values.audits,\n          summary: modalState.record.summary\n        }\n      });\n      showToast({\n        title: 'Compliance item updated',\n        description: values.name,\n        tone: 'success'\n      });\n    } else {\n      const record = await createMutation.mutateAsync({\n        name: values.name,\n        owner: values.owner,\n        status: values.dynamicStatus as ComplianceStatus,\n        items: values.audits,\n        summary: values.name,\n        category\n      });\n      showToast({\n        title: 'Compliance item created',\n        description: record.name,\n        tone: 'success'\n      });\n    }\n    setModalState({ mode: null });\n  };\n\n  const handleDelete = async () => {\n    if (!deleteTarget) return;\n    await deleteMutation.mutateAsync(deleteTarget.id);\n    setDeleteTarget(null);\n  };\n\n  const toggleStatus = (status: ComplianceStatus) => {\n    const current = new Set(selectedStatuses);\n    if (current.has(status)) {\n      current.delete(status);\n    } else {\n      current.add(status);\n    }\n    setQuery({ status: Array.from(current), page: 0 });\n  };\n\n  const clearFilters = () => {\n    setQuery({ q: '', status: [], page: 0 });\n  };\n\n  const pageCount = Math.max(1, Math.ceil(total / Math.max(1, pagination.pageSize)));\n  const currentPage = pagination.pageIndex;\n  const hasFilters = Boolean(query.q || selectedStatuses.length);\n\n  const handleExport = () => {\n    const exportColumns = visibleColumns\n      .filter(columnId => columnId !== 'actions')\n      .map(columnId => {\n        const header = COLUMN_HEADERS[columnId as (typeof ALL_COLUMN_IDS)[number]] ?? columnId;\n        const accessor =\n          COLUMN_ACCESSORS[columnId as keyof typeof COLUMN_ACCESSORS] ??\n          ((record: ComplianceRecord) => (record as Record<string, unknown>)[columnId]);\n        return {\n          id: columnId,\n          header,\n          accessor\n        };\n      });\n\n    startCsvExport<ComplianceRecord>({\n      module: `compliance-${category}`,\n      filename: `${category}-compliance.csv`,\n      columns: exportColumns,\n      rows,\n      totalCount: total,\n      query: {\n        ...listQuery,\n        visibleColumns\n      },\n      threshold: 500\n    });\n  };\n\n  return (\n    <section className=\"flex flex-1 flex-col gap-5\">\n      <header className=\"flex flex-wrap items-start justify-between gap-3\">\n        <div>\n          <h1 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100\">{title}</h1>\n          <p className=\"text-sm text-slate-500 dark:text-slate-400\">{description}</p>\n        </div>\n        <Guard can=\"compliance.write\">\n          <button\n            type=\"button\"\n            onClick={() => setModalState({ mode: 'create' })}\n            className=\"inline-flex items-center gap-2 rounded-xl bg-slate-900 px-4 py-2 text-sm font-medium text-white shadow-sm transition hover:bg-slate-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:bg-slate-100 dark:text-slate-900 dark:hover:bg-slate-200\"\n          >\n            <PlusCircle className=\"h-4 w-4\" aria-hidden=\"true\" />\n            New record\n          </button>\n        </Guard>\n      </header>\n\n      <div className=\"flex flex-wrap items-center gap-3 rounded-2xl border border-slate-200 bg-white p-4 text-sm shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n        <div className=\"relative min-w-[220px] flex-1\">\n          <Search\n            className=\"pointer-events-none absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-slate-400\"\n            aria-hidden=\"true\"\n          />\n          <input\n            type=\"search\"\n            placeholder=\"Search recordsâ¦\"\n            value={query.q}\n            onChange={event => setQuery({ q: event.target.value, page: 0 })}\n            className=\"w-full rounded-xl border border-slate-200 bg-white py-2 pl-10 pr-3 text-sm text-slate-700 shadow-inner focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200 dark:focus:border-slate-400\"\n          />\n        </div>\n        <div className=\"flex flex-wrap items-center gap-2\">\n          {STATUS_OPTIONS.map(status => {\n            const active = selectedStatuses.includes(status);\n            return (\n              <button\n                key={status}\n                type=\"button\"\n                onClick={() => toggleStatus(status)}\n                className={`inline-flex items-center gap-2 rounded-lg px-3 py-1.5 text-sm font-medium transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:focus-visible:outline-slate-400 ${\n                  active\n                    ? 'bg-slate-900 text-white dark:bg-slate-100 dark:text-slate-900'\n                    : 'border border-slate-200 text-slate-600 hover:bg-slate-100 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800'\n                }`}\n              >\n                {status}\n              </button>\n            );\n          })}\n          {hasFilters ? (\n            <button\n              type=\"button\"\n              onClick={clearFilters}\n              className=\"inline-flex items-center gap-1 rounded-lg border border-slate-200 px-3 py-1.5 text-sm text-slate-500 hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800 dark:focus-visible:outline-slate-400\"\n            >\n              Clear\n            </button>\n          ) : null}\n        </div>\n        <div className=\"ml-auto flex items-center gap-2\">\n          <button\n            type=\"button\"\n            onClick={handleExport}\n            disabled={!rows.length}\n            className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            <Download className=\"h-4 w-4\" aria-hidden=\"true\" />\n            Export CSV\n          </button>\n          <ViewsMenu\n            currentQuery={{\n              category,\n              q: query.q,\n              status: selectedStatuses,\n              sort: query.sort,\n              order: query.order,\n              page: pagination.pageIndex,\n              pageSize: pagination.pageSize,\n              cols: visibleColumns\n            }}\n            onApply={next => {\n              const payload: Partial<QueryState> = {};\n              if ('q' in next) payload.q = (next.q as string) ?? '';\n              if ('status' in next) payload.status = (next.status as string[]) ?? [];\n              if ('sort' in next) payload.sort = (next.sort as string) ?? DEFAULT_SORT.sort;\n              if ('order' in next) payload.order =\n                ((next.order as 'asc' | 'desc') ?? DEFAULT_SORT.order) || DEFAULT_SORT.order;\n              if ('pageSize' in next) payload.pageSize = Number(next.pageSize) || QueryDefaults.pageSize;\n              if ('cols' in next) payload.cols = (next.cols as string[]) ?? QueryDefaults.cols;\n              payload.page = ('page' in next ? Number(next.page) : 0) || 0;\n              setQuery(payload);\n            }}\n          />\n          <div data-column-menu className=\"relative\">\n            <button\n              type=\"button\"\n              onClick={() => setColumnMenuOpen(prev => !prev)}\n              aria-haspopup=\"menu\"\n              aria-expanded={columnMenuOpen}\n              className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800 dark:focus-visible:outline-slate-400\"\n            >\n              <Columns3 className=\"h-4 w-4\" aria-hidden=\"true\" />\n              Columns\n            </button>\n            {columnMenuOpen ? (\n              <div\n                role=\"menu\"\n                tabIndex={-1}\n                className=\"absolute right-0 z-20 mt-2 w-56 rounded-2xl border border-slate-200 bg-white p-4 text-sm shadow-xl dark:border-slate-700 dark:bg-slate-900\"\n              >\n                <p className=\"mb-3 font-semibold text-slate-700 dark:text-slate-200\">Visible columns</p>\n                <ul className=\"space-y-2\">\n                  {ALL_COLUMN_IDS.filter(id => id !== 'actions').map(columnId => {\n                    const column = table.getColumn(columnId);\n                    if (!column) return null;\n                    return (\n                      <li key={columnId}>\n                        <label className=\"flex items-center gap-2\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-4 w-4 rounded border-slate-300 text-slate-700 focus:ring-slate-500\"\n                            checked={column.getIsVisible()}\n                            onChange={column.getToggleVisibilityHandler()}\n                          />\n                          <span className=\"text-slate-600 dark:text-slate-300 capitalize\">\n                            {columnId}\n                          </span>\n                        </label>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"relative\" style={{ contain: 'paint', willChange: 'transform' }}>\n        {list.isFetching ? (\n          <div className=\"pointer-events-none absolute right-4 top-4 z-10 inline-flex items-center gap-2 rounded-full bg-slate-900/5 px-3 py-1 text-xs font-medium text-slate-600 dark:bg-slate-100/10 dark:text-slate-300\">\n            <Loader2 className=\"h-3.5 w-3.5 animate-spin\" aria-hidden=\"true\" />\n            Refreshingâ¦\n          </div>\n        ) : null}\n        <VirtualTable\n          table={table}\n          height={480}\n          isLoading={list.isLoading}\n          virtualizationThreshold={500}\n          emptyMessage={hasFilters ? 'No records match the current filters.' : 'No records yet.'}\n          className=\"bg-white dark:bg-slate-900\"\n          tableClassName=\"min-w-full table-fixed divide-y divide-slate-200 text-sm leading-6 dark:divide-slate-800\"\n          headClassName=\"bg-slate-50 text-left font-semibold text-slate-500 dark:bg-slate-900/60 dark:text-slate-300\"\n          bodyClassName=\"divide-y divide-slate-200 dark:divide-slate-800\"\n          rowClassName=\"hover:bg-slate-50 dark:hover:bg-slate-900/60\"\n          cellClassName=\"px-4 py-3 text-slate-600 dark:text-slate-200\"\n        />\n      </div>\n\n      <div className=\"flex flex-wrap items-center justify-between gap-3 rounded-2xl border border-slate-200 bg-white px-4 py-3 text-xs text-slate-500 shadow-sm dark:border-slate-800 dark:bg-slate-900 dark:text-slate-300\">\n        <div>\n          Showing page {currentPage + 1} of {pageCount} Â· {total} total records\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <button\n            type=\"button\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n            className=\"inline-flex items-center gap-1 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            <ChevronLeft className=\"h-4 w-4\" aria-hidden=\"true\" />\n            Prev\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n            className=\"inline-flex items-center gap-1 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            Next\n            <ChevronRight className=\"h-4 w-4\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </div>\n\n      <Modal\n        isOpen={modalState.mode !== null}\n        onClose={() => setModalState({ mode: null })}\n        title={modalState.mode === 'edit' ? 'Edit compliance item' : 'Create compliance item'}\n        description={modalState.mode === 'edit' ? modalState.record?.name : 'Define a new compliance record'}\n      >\n        <GoalForm\n          initialValues={modalState.record ? toGoalFormValues(modalState.record) : undefined}\n          onSubmit={values => handleSubmit(values)}\n          onCancel={() => setModalState({ mode: null })}\n          busy={createMutation.isPending || updateMutation.isPending}\n          submitLabel={modalState.mode === 'edit' ? 'Save changes' : 'Create record'}\n        />\n      </Modal>\n\n      <ConfirmDialog\n        isOpen={Boolean(deleteTarget)}\n        title=\"Delete record\"\n        description={deleteTarget ? `This will remove ${deleteTarget.name}.` : undefined}\n        confirmLabel={deleteMutation.isPending ? 'Deletingâ¦' : 'Delete'}\n        onConfirm={handleDelete}\n        onCancel={() => setDeleteTarget(null)}\n        loading={deleteMutation.isPending}\n      />\n    </section>\n  );\n};\n\nconst ComplianceCategoryPage: React.FC<{\n  category: ComplianceCategory;\n  title: string;\n  description: string;\n}> = props => (\n  <QueryErrorBoundary>\n    <ComplianceCategoryContent {...props} />\n  </QueryErrorBoundary>\n);\n\nexport default ComplianceCategoryPage;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/compliance/ExceptionsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/compliance/ExternalAuditFindingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/compliance/PackagesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/risk/RiskDetailPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/pages/risk/RiskListPage.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Imports \"ColumnDef\", \"SortingState\" and \"VisibilityState\" are only used as type.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":8,"endColumn":32,"fix":{"range":[61,117],"text":"import type {\n  ColumnDef,\n  SortingState,\n  VisibilityState} from '@tanstack/react-table';\nimport {"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useEffect, useMemo, useState } from 'react';\nimport {\n  ColumnDef,\n  SortingState,\n  VisibilityState,\n  getCoreRowModel,\n  useReactTable\n} from '@tanstack/react-table';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Columns3,\n  Download,\n  Loader2,\n  PlusCircle,\n  Search\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { useRiskList, useCreateRisk, useUpdateRisk, useDeleteRisk } from '../../features/risk/api';\nimport type { RiskRecord, RiskStatus } from '../../lib/repo/risk/types';\nimport QueryErrorBoundary from '../../components/errors/QueryErrorBoundary';\nimport VirtualTable from '../../components/table/VirtualTable';\nimport ViewsMenu from '../../components/views/ViewsMenu';\nimport { Guard } from '../../lib/rbac/guard';\nimport { useToast } from '../../components/feedback/ToastProvider';\nimport Modal from '../../components/overlay/Modal';\nimport ConfirmDialog from '../../components/overlay/ConfirmDialog';\nimport GoalForm from '../../features/program/goals/GoalForm';\nimport type { GoalFormValues } from '../../lib/forms/validation';\nimport useQuerySync from '../../hooks/useQuerySync';\nimport { startCsvExport } from '../../lib/export/exportCsv';\n\nconst STATUS_OPTIONS: RiskStatus[] = ['low', 'moderate', 'high'];\n\nconst statusBadgeStyles: Record<RiskStatus, string> = {\n  low: 'bg-emerald-100 text-emerald-700 dark:bg-emerald-500/15 dark:text-emerald-200',\n  moderate: 'bg-amber-100 text-amber-700 dark:bg-amber-500/15 dark:text-amber-200',\n  high: 'bg-rose-100 text-rose-700 dark:bg-rose-500/15 dark:text-rose-200'\n};\n\nconst toFormValues = (record: RiskRecord): GoalFormValues => ({\n  name: record.title,\n  owner: record.owner,\n  audits: record.controls ?? 0,\n  dynamicStatus: record.status as any\n});\n\nconst ALL_COLUMN_IDS = [\n  'status',\n  'title',\n  'owner',\n  'impact',\n  'likelihood',\n  'controls',\n  'updatedAt',\n  'actions'\n] as const;\n\nconst COLUMN_HEADERS: Record<(typeof ALL_COLUMN_IDS)[number], string> = {\n  status: 'Status',\n  title: 'Risk',\n  owner: 'Owner',\n  impact: 'Impact',\n  likelihood: 'Likelihood',\n  controls: 'Controls',\n  updatedAt: 'Updated',\n  actions: 'Actions'\n};\n\nconst COLUMN_ACCESSORS: Record<\n  Exclude<(typeof ALL_COLUMN_IDS)[number], 'actions'>,\n  (record: RiskRecord) => unknown\n> = {\n  status: record => record.status,\n  title: record => record.title,\n  owner: record => record.owner,\n  impact: record => record.impact,\n  likelihood: record => record.likelihood,\n  controls: record => record.controls ?? '',\n  updatedAt: record => record.updatedAt\n};\n\nconst mapVisibleToState = (visible: string[]): VisibilityState => {\n  const hidden = ALL_COLUMN_IDS.filter(id => !visible.includes(id));\n  return hidden.reduce<VisibilityState>((acc, columnId) => {\n    acc[columnId] = false;\n    return acc;\n  }, {});\n};\n\nconst extractVisible = (visibility: VisibilityState) =>\n  ALL_COLUMN_IDS.filter(id => visibility[id] !== false);\n\nconst mapSortingFromQuery = (sort: string, order: 'asc' | 'desc'): SortingState =>\n  sort ? [{ id: sort, desc: order === 'desc' }] : [];\n\nconst DEFAULT_SORT = { sort: 'updatedAt', order: 'desc' as const };\n\nconst QueryDefaults = {\n  q: '',\n  status: [] as RiskStatus[],\n  sort: DEFAULT_SORT.sort,\n  order: DEFAULT_SORT.order,\n  page: 0,\n  pageSize: 20,\n  cols: ALL_COLUMN_IDS.map(String)\n};\n\ntype QueryState = typeof QueryDefaults;\n\nconst RiskListContent: React.FC = () => {\n  const navigate = useNavigate();\n  const { showToast } = useToast();\n  const [query, setQuery] = useQuerySync<QueryState>({\n    defaults: QueryDefaults,\n    schema: {\n      q: 'string',\n      status: 'string[]',\n      sort: 'string',\n      order: 'string',\n      page: 'number',\n      pageSize: 'number',\n      cols: 'string[]'\n    }\n  });\n  const [modalState, setModalState] = useState<{ mode: 'create' | 'edit' | null; record?: RiskRecord }>({\n    mode: null\n  });\n  const [deleteTarget, setDeleteTarget] = useState<RiskRecord | null>(null);\n  const [columnMenuOpen, setColumnMenuOpen] = useState(false);\n\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>(() =>\n    mapVisibleToState(query.cols.length ? query.cols : ALL_COLUMN_IDS.map(String))\n  );\n  const [sorting, setSorting] = useState<SortingState>(() =>\n    mapSortingFromQuery(query.sort, query.order)\n  );\n  const [pagination, setPagination] = useState({\n    pageIndex: query.page,\n    pageSize: query.pageSize\n  });\n\n  useEffect(() => {\n    setColumnVisibility(prev => {\n      const next = mapVisibleToState(query.cols.length ? query.cols : ALL_COLUMN_IDS.map(String));\n      const prevVisible = extractVisible(prev).join(',');\n      const nextVisible = extractVisible(next).join(',');\n      return prevVisible === nextVisible ? prev : next;\n    });\n  }, [query.cols]);\n\n  useEffect(() => {\n    setSorting(mapSortingFromQuery(query.sort, query.order));\n  }, [query.sort, query.order]);\n\n  useEffect(() => {\n    setPagination(prev => {\n      if (prev.pageIndex === query.page && prev.pageSize === query.pageSize) {\n        return prev;\n      }\n      return {\n        pageIndex: query.page,\n        pageSize: query.pageSize\n      };\n    });\n  }, [query.page, query.pageSize]);\n\n  useEffect(() => {\n    if (!columnMenuOpen) return undefined;\n    const handleClick = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      if (!target.closest('[data-column-menu]')) {\n        setColumnMenuOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClick);\n    return () => document.removeEventListener('mousedown', handleClick);\n  }, [columnMenuOpen]);\n\n  const selectedStatuses = useMemo(\n    () =>\n      (query.status as string[]).filter((value): value is RiskStatus =>\n        STATUS_OPTIONS.includes(value as RiskStatus)\n      ),\n    [query.status]\n  );\n\n  const visibleColumns = useMemo(() => extractVisible(columnVisibility), [columnVisibility]);\n\n  const listQuery = useMemo(\n    () => ({\n      q: query.q,\n      status: selectedStatuses,\n      sort: query.sort,\n      order: query.order as 'asc' | 'desc',\n      page: pagination.pageIndex,\n      pageSize: pagination.pageSize,\n      cols: visibleColumns\n    }),\n    [query.q, selectedStatuses, query.sort, query.order, pagination.pageIndex, pagination.pageSize, visibleColumns]\n  );\n\n  const list = useRiskList(listQuery);\n  const createMutation = useCreateRisk();\n  const updateMutation = useUpdateRisk();\n  const deleteMutation = useDeleteRisk();\n\n  const rows = list.data?.items ?? [];\n  const total = list.data?.total ?? 0;\n\n  const columns = useMemo<ColumnDef<RiskRecord>[]>(\n    () => [\n      {\n        accessorKey: 'status',\n        header: () => 'Status',\n        cell: info => (\n          <span\n            className={`inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-xs font-medium ${\n              statusBadgeStyles[info.getValue() as RiskStatus]\n            }`}\n          >\n            <span className=\"h-1.5 w-1.5 rounded-full bg-current\" />\n            {String(info.getValue())}\n          </span>\n        ),\n        enableSorting: true\n      },\n      {\n        accessorKey: 'title',\n        header: () => 'Risk',\n        cell: info => (\n          <button\n            type=\"button\"\n            onClick={() => navigate(`/risk/${info.row.original.id}`)}\n            className=\"text-left font-medium text-slate-900 hover:underline dark:text-slate-100\"\n          >\n            {String(info.getValue())}\n          </button>\n        ),\n        enableSorting: true\n      },\n      {\n        accessorKey: 'owner',\n        header: () => 'Owner',\n        cell: info => String(info.getValue()),\n        enableSorting: true\n      },\n      {\n        accessorKey: 'impact',\n        header: () => 'Impact',\n        cell: info => String(info.getValue()),\n        enableSorting: true\n      },\n      {\n        accessorKey: 'likelihood',\n        header: () => 'Likelihood',\n        cell: info => String(info.getValue()),\n        enableSorting: true\n      },\n      {\n        accessorKey: 'controls',\n        header: () => 'Controls',\n        cell: info => info.getValue() ?? 0,\n        enableSorting: true\n      },\n      {\n        accessorKey: 'updatedAt',\n        header: () => 'Updated',\n        cell: info => new Date(String(info.getValue())).toLocaleString(),\n        enableSorting: true\n      },\n      {\n        id: 'actions',\n        header: () => 'Actions',\n        cell: info => (\n          <div className=\"flex gap-2\">\n            <Guard can=\"risk.write\">\n              <button\n                type=\"button\"\n                onClick={() => setModalState({ mode: 'edit', record: info.row.original })}\n                className=\"text-xs text-slate-500 underline-offset-2 hover:underline dark:text-slate-300\"\n              >\n                Edit\n              </button>\n            </Guard>\n            <Guard can=\"risk.delete\" fallback={null}>\n              <button\n                type=\"button\"\n                onClick={() => setDeleteTarget(info.row.original)}\n                className=\"text-xs text-rose-500 underline-offset-2 hover:underline\"\n              >\n                Delete\n              </button>\n            </Guard>\n          </div>\n        )\n      }\n    ],\n    [navigate]\n  );\n\n  const table = useReactTable({\n    data: rows,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      pagination\n    },\n    onSortingChange: updater => {\n      setSorting(prev => {\n        const next = typeof updater === 'function' ? updater(prev) : updater;\n        if (!next.length) {\n          setQuery({ sort: DEFAULT_SORT.sort, order: DEFAULT_SORT.order });\n          return next;\n        }\n        const [first] = next;\n        setQuery({ sort: first.id, order: first.desc ? 'desc' : 'asc' });\n        return next;\n      });\n    },\n    onColumnVisibilityChange: updater => {\n      setColumnVisibility(prev => {\n        const next =\n          typeof updater === 'function' ? updater(prev) : (updater as VisibilityState);\n        const visible = extractVisible(next);\n        setQuery({ cols: visible });\n        return next;\n      });\n    },\n    onPaginationChange: updater => {\n      setPagination(prev => {\n        const next = typeof updater === 'function' ? updater(prev) : updater;\n        if (next.pageSize !== prev.pageSize) {\n          setQuery({ pageSize: next.pageSize, page: 0 });\n          return { ...next, pageIndex: 0 };\n        }\n        if (next.pageIndex !== prev.pageIndex) {\n          setQuery({ page: next.pageIndex });\n        }\n        return next;\n      });\n    },\n    getCoreRowModel: getCoreRowModel(),\n    enableSortingRemoval: true,\n    manualSorting: true,\n    manualPagination: true,\n    autoResetPageIndex: false,\n    pageCount: Math.max(1, Math.ceil(total / Math.max(1, pagination.pageSize))),\n    debugTable: false\n  });\n\n  const handleSubmit = async (values: GoalFormValues) => {\n    if (modalState.mode === 'edit' && modalState.record) {\n      await updateMutation.mutateAsync({\n        id: modalState.record.id,\n        input: {\n          title: values.name,\n          owner: values.owner,\n          status: values.dynamicStatus as RiskStatus,\n          controls: values.audits\n        }\n      });\n      showToast({ title: 'Risk updated', description: values.name, tone: 'success' });\n    } else {\n      await createMutation.mutateAsync({\n        title: values.name,\n        owner: values.owner,\n        status: values.dynamicStatus as RiskStatus,\n        impact: 'medium',\n        likelihood: 'possible',\n        controls: values.audits\n      });\n      showToast({ title: 'Risk created', description: values.name, tone: 'success' });\n    }\n    setModalState({ mode: null });\n  };\n\n  const handleDelete = async () => {\n    if (!deleteTarget) return;\n    await deleteMutation.mutateAsync(deleteTarget.id);\n    setDeleteTarget(null);\n  };\n\n  const toggleStatus = (status: RiskStatus) => {\n    const current = new Set(selectedStatuses);\n    if (current.has(status)) {\n      current.delete(status);\n    } else {\n      current.add(status);\n    }\n    setQuery({ status: Array.from(current), page: 0 });\n  };\n\n  const clearFilters = () => {\n    setQuery({ q: '', status: [], page: 0 });\n  };\n\n  const pageCount = Math.max(1, Math.ceil(total / Math.max(1, pagination.pageSize)));\n  const currentPage = pagination.pageIndex;\n  const hasFilters = Boolean(query.q || selectedStatuses.length);\n\n  const handleExport = () => {\n    const exportColumns = visibleColumns\n      .filter(columnId => columnId !== 'actions')\n      .map(columnId => {\n        const header = COLUMN_HEADERS[columnId as (typeof ALL_COLUMN_IDS)[number]] ?? columnId;\n        const accessor =\n          COLUMN_ACCESSORS[columnId as keyof typeof COLUMN_ACCESSORS] ??\n          ((record: RiskRecord) => (record as Record<string, unknown>)[columnId]);\n        return {\n          id: columnId,\n          header,\n          accessor\n        };\n      });\n\n    startCsvExport<RiskRecord>({\n      module: 'risk-register',\n      filename: 'risk-register.csv',\n      columns: exportColumns,\n      rows,\n      totalCount: total,\n      query: {\n        ...listQuery,\n        visibleColumns\n      },\n      threshold: 500\n    });\n  };\n\n  return (\n    <section className=\"flex flex-1 flex-col gap-5\">\n      <header className=\"flex flex-wrap items-start justify-between gap-3\">\n        <div>\n          <h1 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100\">Risk register</h1>\n          <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n            Track operational and compliance risks across the TAXIPartner program.\n          </p>\n        </div>\n        <Guard can=\"risk.write\">\n          <button\n            type=\"button\"\n            onClick={() => setModalState({ mode: 'create' })}\n            className=\"inline-flex items-center gap-2 rounded-xl bg-slate-900 px-4 py-2 text-sm font-medium text-white shadow-sm transition hover:bg-slate-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:bg-slate-100 dark:text-slate-900 dark:hover:bg-slate-200\"\n          >\n            <PlusCircle className=\"h-4 w-4\" aria-hidden=\"true\" />\n            New risk\n          </button>\n        </Guard>\n      </header>\n\n      <div className=\"flex flex-wrap items-center gap-3 rounded-2xl border border-slate-200 bg-white p-4 text-sm shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n        <div className=\"relative min-w-[220px] flex-1\">\n          <Search\n            className=\"pointer-events-none absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-slate-400\"\n            aria-hidden=\"true\"\n          />\n          <input\n            type=\"search\"\n            placeholder=\"Search risksâ¦\"\n            value={query.q}\n            onChange={event => setQuery({ q: event.target.value, page: 0 })}\n            className=\"w-full rounded-xl border border-slate-200 bg-white py-2 pl-10 pr-3 text-sm text-slate-700 shadow-inner focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-500/40 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200 dark:focus:border-slate-400\"\n          />\n        </div>\n        <div className=\"flex flex-wrap items-center gap-2\">\n          {STATUS_OPTIONS.map(status => {\n            const active = selectedStatuses.includes(status);\n            return (\n              <button\n                key={status}\n                type=\"button\"\n                onClick={() => toggleStatus(status)}\n                className={`inline-flex items-center gap-2 rounded-lg px-3 py-1.5 text-sm font-medium transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:focus-visible:outline-slate-400 ${\n                  active\n                    ? 'bg-slate-900 text-white dark:bg-slate-100 dark:text-slate-900'\n                    : 'border border-slate-200 text-slate-600 hover:bg-slate-100 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800'\n                }`}\n              >\n                {status}\n              </button>\n            );\n          })}\n          {hasFilters ? (\n            <button\n              type=\"button\"\n              onClick={clearFilters}\n              className=\"inline-flex items-center gap-1 rounded-lg border border-slate-200 px-3 py-1.5 text-sm text-slate-500 hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800 dark:focus-visible:outline-slate-400\"\n            >\n              Clear\n            </button>\n          ) : null}\n        </div>\n        <div className=\"ml-auto flex items-center gap-2\">\n          <button\n            type=\"button\"\n            onClick={handleExport}\n            disabled={!rows.length}\n            className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            <Download className=\"h-4 w-4\" aria-hidden=\"true\" />\n            Export CSV\n          </button>\n          <ViewsMenu\n            currentQuery={{\n              q: query.q,\n              status: selectedStatuses,\n              sort: query.sort,\n              order: query.order,\n              page: pagination.pageIndex,\n              pageSize: pagination.pageSize,\n              cols: visibleColumns\n            }}\n            onApply={next => {\n              const payload: Partial<QueryState> = {};\n              if ('q' in next) payload.q = (next.q as string) ?? '';\n              if ('status' in next) payload.status = (next.status as string[]) ?? [];\n              if ('sort' in next) payload.sort = (next.sort as string) ?? DEFAULT_SORT.sort;\n              if ('order' in next) payload.order =\n                ((next.order as 'asc' | 'desc') ?? DEFAULT_SORT.order) || DEFAULT_SORT.order;\n              if ('pageSize' in next) payload.pageSize = Number(next.pageSize) || QueryDefaults.pageSize;\n              if ('cols' in next) payload.cols = (next.cols as string[]) ?? QueryDefaults.cols;\n              payload.page = ('page' in next ? Number(next.page) : 0) || 0;\n              setQuery(payload);\n            }}\n          />\n          <div data-column-menu className=\"relative\">\n            <button\n              type=\"button\"\n              onClick={() => setColumnMenuOpen(prev => !prev)}\n              aria-haspopup=\"menu\"\n              aria-expanded={columnMenuOpen}\n              className=\"inline-flex items-center gap-2 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800 dark:focus-visible:outline-slate-400\"\n            >\n              <Columns3 className=\"h-4 w-4\" aria-hidden=\"true\" />\n              Columns\n            </button>\n            {columnMenuOpen ? (\n              <div\n                role=\"menu\"\n                tabIndex={-1}\n                className=\"absolute right-0 z-20 mt-2 w-56 rounded-2xl border border-slate-200 bg-white p-4 text-sm shadow-xl dark:border-slate-700 dark:bg-slate-900\"\n              >\n                <p className=\"mb-3 font-semibold text-slate-700 dark:text-slate-200\">Visible columns</p>\n                <ul className=\"space-y-2\">\n                  {ALL_COLUMN_IDS.filter(id => id !== 'actions').map(columnId => {\n                    const column = table.getColumn(columnId);\n                    if (!column) return null;\n                    return (\n                      <li key={columnId}>\n                        <label className=\"flex items-center gap-2\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-4 w-4 rounded border-slate-300 text-slate-700 focus:ring-slate-500\"\n                            checked={column.getIsVisible()}\n                            onChange={column.getToggleVisibilityHandler()}\n                          />\n                          <span className=\"text-slate-600 dark:text-slate-300 capitalize\">\n                            {columnId}\n                          </span>\n                        </label>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"relative\" style={{ contain: 'paint', willChange: 'transform' }}>\n        {list.isFetching ? (\n          <div className=\"pointer-events-none absolute right-4 top-4 z-10 inline-flex items-center gap-2 rounded-full bg-slate-900/5 px-3 py-1 text-xs font-medium text-slate-600 dark:bg-slate-100/10 dark:text-slate-300\">\n            <Loader2 className=\"h-3.5 w-3.5 animate-spin\" aria-hidden=\"true\" />\n            Refreshingâ¦\n          </div>\n        ) : null}\n        <VirtualTable\n          table={table}\n          height={480}\n          isLoading={list.isLoading}\n          virtualizationThreshold={500}\n          emptyMessage={hasFilters ? 'No risks match the current filters.' : 'No risks documented yet.'}\n          className=\"bg-white dark:bg-slate-900\"\n          tableClassName=\"min-w-full table-fixed divide-y divide-slate-200 text-sm leading-6 dark:divide-slate-800\"\n          headClassName=\"bg-slate-50 text-left font-semibold text-slate-500 dark:bg-slate-900/60 dark:text-slate-300\"\n          bodyClassName=\"divide-y divide-slate-200 dark:divide-slate-800\"\n          rowClassName=\"hover:bg-slate-50 dark:hover:bg-slate-900/60\"\n          cellClassName=\"px-4 py-3 text-slate-600 dark:text-slate-200\"\n        />\n      </div>\n\n      <div className=\"flex flex-wrap items-center justify-between gap-3 rounded-2xl border border-slate-200 bg-white px-4 py-3 text-xs text-slate-500 shadow-sm dark:border-slate-800 dark:bg-slate-900 dark:text-slate-300\">\n        <div>\n          Showing page {currentPage + 1} of {pageCount} Â· {total} total risks\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <button\n            type=\"button\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n            className=\"inline-flex items-center gap-1 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            <ChevronLeft className=\"h-4 w-4\" aria-hidden=\"true\" />\n            Prev\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n            className=\"inline-flex items-center gap-1 rounded-lg border border-slate-200 px-3 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 disabled:cursor-not-allowed disabled:opacity-40 dark:border-slate-700 dark:text-slate-300 dark:hover:bg-slate-800\"\n          >\n            Next\n            <ChevronRight className=\"h-4 w-4\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </div>\n\n      <Modal\n        isOpen={modalState.mode !== null}\n        onClose={() => setModalState({ mode: null })}\n        title={modalState.mode === 'edit' ? 'Edit risk' : 'New risk'}\n        description={modalState.mode === 'edit' ? modalState.record?.title : 'Document a new risk entry.'}\n      >\n        <GoalForm\n          initialValues={modalState.record ? toFormValues(modalState.record) : undefined}\n          onSubmit={values => handleSubmit(values)}\n          onCancel={() => setModalState({ mode: null })}\n          submitLabel={modalState.mode === 'edit' ? 'Save changes' : 'Create risk'}\n          busy={createMutation.isPending || updateMutation.isPending}\n        />\n      </Modal>\n\n      <ConfirmDialog\n        isOpen={Boolean(deleteTarget)}\n        title=\"Delete risk\"\n        description={deleteTarget ? `This will remove ${deleteTarget.title}.` : undefined}\n        confirmLabel={deleteMutation.isPending ? 'Deletingâ¦' : 'Delete'}\n        onConfirm={handleDelete}\n        onCancel={() => setDeleteTarget(null)}\n        loading={deleteMutation.isPending}\n      />\n    </section>\n  );\n};\n\nconst RiskListPage: React.FC = () => (\n  <QueryErrorBoundary>\n    <RiskListContent />\n  </QueryErrorBoundary>\n);\n\nexport default RiskListPage;\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/routes.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"All imports in the declaration are only used as types. Use `import type`.","line":22,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":22,"endColumn":43,"fix":{"range":[275,275],"text":" type"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  AlertTriangle,\n  BarChart3,\n  BookOpen,\n  Building,\n  Building2,\n  Car,\n  ClipboardList,\n  Factory,\n  FileText,\n  LayoutDashboard,\n  ListChecks,\n  Package,\n  Rocket,\n  ScrollText,\n  Settings,\n  Shield,\n  ShieldCheck,\n  Target,\n  Users\n} from 'lucide-react';\nimport { LucideIcon } from 'lucide-react';\nimport type { PermissionKey } from './lib/rbac/policy';\n\nexport type AppRoute = {\n  path: string;\n  label: string;\n  icon?: LucideIcon;\n  permission?: PermissionKey;\n};\n\nexport const PRIMARY_ROUTES: AppRoute[] = [\n  { path: '/dashboard', label: 'Dashboard', icon: LayoutDashboard },\n  { path: '/program/goals', label: 'Goals', icon: Target },\n  { path: '/program/audits', label: 'Audits', icon: ClipboardList },\n  { path: '/iam/users', label: 'Users', icon: Users, permission: 'iam.users.read' },\n  { path: '/iam/approvals', label: 'Approvals', icon: ShieldCheck, permission: 'iam.users.read' },\n  { path: '/iam/roles', label: 'Roles', icon: ListChecks, permission: 'iam.roles.read' },\n  { path: '/iam/permissions', label: 'Permissions', icon: ShieldCheck, permission: 'iam.permissions.read' },\n  { path: '/iam/sessions', label: 'Sessions', icon: Shield, permission: 'iam.sessions.read' },\n  { path: '/iam/audit-logs', label: 'Audit Logs', icon: ScrollText, permission: 'reports.auditLogs.read' },\n  { path: '/tenants', label: 'Tenants', icon: Building2, permission: 'tenants.manage' },\n  { path: '/tenants/organizations', label: 'Organizations', icon: Building, permission: 'tenants.manage' },\n  { path: '/tenants/companies', label: 'Companies', icon: Factory, permission: 'tenants.manage' },\n  { path: '/tenants/mandates', label: 'Mandates', icon: FileText, permission: 'tenants.manage' },\n  { path: '/tenants/ous', label: 'Org Units', icon: FileText, permission: 'tenants.manage' },\n  { path: '/tenants/vehicles', label: 'Vehicles', icon: Car, permission: 'tenants.manage' },\n  { path: '/assets', label: 'Assets', icon: Package },\n  { path: '/controls', label: 'Controls', icon: Shield },\n  { path: '/analytics', label: 'Analytics', icon: BarChart3, permission: 'system.devtools' },\n  { path: '/risk', label: 'Risk', icon: AlertTriangle, permission: 'risk.read' },\n  { path: '/audit', label: 'Audit', icon: ClipboardList, permission: 'audit.read' },\n  { path: '/secops', label: 'SecOps', icon: Shield },\n  { path: '/compliance', label: 'Compliance', icon: ShieldCheck, permission: 'compliance.read' },\n  { path: '/release', label: 'Release Mgmt', icon: Rocket, permission: 'system.devtools' },\n  { path: '/library', label: 'Design Library', icon: BookOpen, permission: 'system.devtools' },\n  { path: '/system/settings', label: 'System Settings', icon: Settings, permission: 'system.settings.read' }\n];\n\nexport const PROGRAM_TABS = [\n  { to: '/program/goals', label: 'Goals' },\n  { to: '/program/audits', label: 'Audits' }\n];\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/utils/storage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/utils/storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/taxipartner-admin/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/taxipartner/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
